--source include/have_debug_sync.inc
--source include/linux.inc
--source include/have_pool_of_threads.inc

--source include/count_sessions.inc

let $default_id = `SELECT CONNECTION_ID()`;

# in this test we expect "thread_pool_size" to be set to "2"
# and "thread_pool_max_threads" to "4"
# these values are set in the corresponding ".cnf" file

# creating a connection in which any statement is never sent
connect(auxcon0,localhost,root,,);

# create five more connections and execute a simple "SELECT"
# in each of them
connect(auxcon1,localhost,root,,);
let $first_id = `SELECT CONNECTION_ID()`;
SELECT 'one';

connect(auxcon2,localhost,root,,);
let $second_id = `SELECT CONNECTION_ID()`;
SELECT 'two';

connect(auxcon3,localhost,root,,);
let $third_id = `SELECT CONNECTION_ID()`;
SELECT 'three';

connect(auxcon4,localhost,root,,);
let $forth_id = `SELECT CONNECTION_ID()`;
SELECT 'four';

connect(auxcon5,localhost,root,,);
let $fifth_id = `SELECT CONNECTION_ID()`;
SELECT 'five';

# occupy the 1st thread in the pool of 4 with SLEEP() statement
connection auxcon1;
SET DEBUG_SYNC = 'before_execute_sql_command SIGNAL started1';
SET DEBUG_SYNC = 'execute_command_after_close_tables WAIT_FOR finished1';
--send SELECT SLEEP(1)

# execute a long-lasting statement in the 2nd thread
connection auxcon2;
SET DEBUG_SYNC = 'now WAIT_FOR started1';
SET DEBUG_SYNC = 'before_execute_sql_command SIGNAL started2';
SET DEBUG_SYNC = 'execute_command_after_close_tables WAIT_FOR finished2';
--send SELECT 'long statement 2'

# occupy another thread (3rd) with SLEEP() statement
connection auxcon3;
SET DEBUG_SYNC = 'now WAIT_FOR started2';
SET DEBUG_SYNC = 'before_execute_sql_command SIGNAL started3';
SET DEBUG_SYNC = 'execute_command_after_close_tables WAIT_FOR finished3';
--send SELECT SLEEP(1)

# although there are 3 active statements currently executing,
# only 1 of them is not in "sleeping" state and as "thread_pool_size"
# option is set to "2", it is possible to execute one more
# long-lasting statement which will occupy the last (4th) thread
# in the pool
connection auxcon4;
SET DEBUG_SYNC = 'now WAIT_FOR started3';
SET DEBUG_SYNC = 'before_execute_sql_command SIGNAL started4';
SET DEBUG_SYNC = 'execute_command_after_close_tables WAIT_FOR finished4';
--send SELECT 'long statement 4'

# an attempt to execute another long-lasting statement will result in putting
# it into a queue as all 4 threads have already been taken from the pool
# moreover, 2 of them are already in executing state
connection auxcon5;
--send SELECT 'long statement 5'

# use the extra port connection to get values from "processlist"
# regular connection cannot be used here as "SELECT ... FROM processlist"
# statement will be queued here waiting for "SELECT 'long statement X'" to
# complete
connect(extracon,127.0.0.1,root,,test,$MASTER_EXTRA_PORT,);
let extra_id = `SELECT CONNECTION_ID()`;

--disable_query_log

SET DEBUG_SYNC = 'now WAIT_FOR started4';

# the "SLEEP()" statement executing in the "auxcon1" must have a non-null TID
--eval SELECT COUNT(*) = 1 AS first_id_not_null FROM information_schema.processlist WHERE ID = $first_id AND TID IS NOT NULL

# the "SELECT 'long statement 2'" statement executing in the "auxcon2" must have a non-null TID
--eval SELECT COUNT(*) = 1 AS second_id_not_null FROM information_schema.processlist WHERE ID = $second_id AND TID IS NOT NULL

# the "SLEEP()" statement executing in the "auxcon3" must have a non-null TID
--eval SELECT COUNT(*) = 1 AS third_id_not_null FROM information_schema.processlist WHERE ID = $third_id AND TID IS NOT NULL

# the "SELECT 'long statement 4'" statement executing in the "auxcon4" must have a non-null TID
--eval SELECT COUNT(*) = 1 AS forth_id_not_null FROM information_schema.processlist WHERE ID = $forth_id AND TID IS NOT NULL

# the "extracon" must always have a dedicated thread and therefore a non-null TID
--eval SELECT COUNT(*) = 1 AS extra_id_not_null FROM information_schema.processlist WHERE ID = $extra_id AND TID IS NOT NULL

# all 5 TIDs (4 from pool and 1 extra) from the assertions above must be unique
--eval SELECT COUNT(DISTINCT TID) = 5 AS all_tid_unique FROM information_schema.processlist WHERE ID IN ($first_id, $second_id, $third_id, $forth_id, $extra_id)

# as no statement is executing in the "default" connection, it must have null in TID field
--eval SELECT COUNT(*) = 1 AS default_id_null FROM information_schema.processlist WHERE ID = $default_id AND TID IS NULL

# as "SELECT 'long statement 5'" statement is queued in the "auxcon5", it must have null in TID field
--eval SELECT COUNT(*) = 1 AS fifth_id_null FROM information_schema.processlist WHERE ID = $fifth_id AND TID IS NULL

# as no statement has ever been executed in the "auxcon0", its TID must also be null
let $zeroth_id = `SELECT ID FROM information_schema.processlist WHERE ID NOT IN ($default_id, $first_id, $second_id, $third_id, $forth_id, $fifth_id, $extra_id)`;
--eval SELECT COUNT(*) = 1 AS zeroth_id_null FROM information_schema.processlist WHERE ID = $zeroth_id AND TID IS NULL

SET DEBUG_SYNC = 'now SIGNAL finished1';
SET DEBUG_SYNC = 'now SIGNAL finished2';
SET DEBUG_SYNC = 'now SIGNAL finished3';
SET DEBUG_SYNC = 'now SIGNAL finished4';

# waiting for statements in aux connections to complete
connection auxcon1;
--reap

connection auxcon2;
--reap

connection auxcon3;
--reap

connection auxcon4;
--reap

connection auxcon5;
--reap

# at this point all connections except "extracon" must have NULL in TID field
connection extracon;
# "wait_condition" is used here as it may be necessary to make several attempts here to guarantee that all the
# threads in the pool have detached
let $wait_condition = SELECT COUNT(*) = 7 FROM information_schema.processlist WHERE ID IN ($default_id, $zeroth_id, $first_id, $second_id, $third_id, $forth_id, $fifth_id, $extra_id) AND TID IS NULL;
--source include/wait_condition.inc

# the "extracon" must still have a non-null TID
--eval SELECT COUNT(*) = 1 AS extra_id_still_not_null FROM information_schema.processlist WHERE ID = $extra_id AND TID IS NOT NULL

--enable_query_log

disconnect auxcon0;
disconnect auxcon1;
disconnect auxcon2;
disconnect auxcon3;
disconnect auxcon4;
disconnect auxcon5;
disconnect extracon;

connection default;
--source include/wait_until_count_sessions.inc
