# This test is based on galera_ist_gcache_rollover.test with applied patch 
# attached to the Galera upstream ticket https://github.com/codership/galera/issues/385

#
# Test that if the gcache rolls over while IST is in progress, IST will still complete.
# This is achieved by using the ist_sender_send_after_get_buffers Galera dbug sync point to block the donor after 
# the first gcache buffer has been locked for IST.
#
# After IST blocks, we roll over the gcache and resume IST to confirm that it completes successfully.
#
# Two nodes perform IST at the same time in order to make the test more stressfull
#

--source include/galera_cluster_3nodes.inc
--source include/have_debug_sync.inc
--source suite/galera/include/galera_have_debug_sync.inc

--connection node_2
CALL mtr.add_suppression("Unsupported protocol downgrade: incremental data collection disabled");
--connection node_3
CALL mtr.add_suppression("Unsupported protocol downgrade: incremental data collection disabled");

CREATE TABLE t1 (f1 INTEGER PRIMARY KEY);
INSERT INTO t1 VALUES (01), (02), (03), (04), (05);

--echo # Disconnect nodes #2 and #3
--connection node_2
--source include/wait_until_connected_again.inc
--source suite/galera/include/galera_unload_provider.inc

--connection node_3
--source include/wait_until_connected_again.inc
--source suite/galera/include/galera_unload_provider.inc

--connection node_1
--source include/wait_until_connected_again.inc
INSERT INTO t1 VALUES (11), (12), (13), (14), (15);

--echo # Wait until nodes #2 and #3 have left
--let $wait_condition = SELECT VARIABLE_VALUE = 1 FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc

INSERT INTO t1 VALUES (21), (22), (23), (24), (25);

--echo # Make sure IST will block ...
--let $galera_sync_point = ist_sender_send_after_get_buffers
--source include/galera_set_sync_point.inc

--echo # ... and restart providers to force IST
--connection node_2
--disable_query_log
--eval SET GLOBAL wsrep_provider = '$wsrep_provider_orig';
--eval SET GLOBAL wsrep_cluster_address = '$wsrep_cluster_address_orig';
--enable_query_log

--connection node_1
INSERT INTO t1 VALUES (31), (32), (33), (34), (35);

--connection node_3
--disable_query_log
--eval SET GLOBAL wsrep_provider = '$wsrep_provider_orig';
--eval SET GLOBAL wsrep_cluster_address = '$wsrep_cluster_address_orig';
--enable_query_log

--connection node_1
--let $wait_condition = SELECT COUNT(*) = 1 FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_debug_sync_waiters' AND VARIABLE_VALUE = 'ist_sender_send_after_get_buffers ist_sender_send_after_get_buffers';
--source include/wait_condition.inc

INSERT INTO t1 VALUES (41), (42), (43), (44), (45);

--echo # Roll over gcache by writing a lot of information to it

CREATE TABLE t2 (f1 INT PRIMARY KEY, f2 LONGTEXT);
--let $count = 4096
while ($count)
{
  --eval INSERT INTO t2 VALUES ($count, REPEAT('x', 512))
  --dec $count
}

SELECT COUNT(*) FROM t2;

--echo # Unlock IST and wait for it to complete
--source include/galera_clear_sync_point.inc
--source include/galera_signal_sync_point.inc

INSERT INTO t1 VALUES (51), (52), (53), (54), (55);

--connection node_2
--source include/wait_until_connected_again.inc

--connection node_3
--source include/wait_until_connected_again.inc

--echo # Final checks 
--connection node_2
SELECT COUNT(*) = 30 FROM t1;
SELECT COUNT(*) = 3 FROM t2;
SELECT LENGTH(f1) = 512 * 1024 FROM t2;

--echo # Final checks
--connection node_3
SELECT COUNT(*) = 30 FROM t1;
SELECT COUNT(*) = 3 FROM t2;
SELECT LENGTH(f1) = 512 * 1024 FROM t2;

DROP TABLE t1, t2;
