#
# Test the behavior of a Galera async slave if it goes non-prim. Async replication
# should abort with an error but it should be possible to restart it.
#
# The galera/galera_2node_slave.cnf describes the setup of the nodes
#

--source include/have_log_bin.inc
--source include/big_test.inc

# Step #1. Establish replication
#
# As node #1 is not a Galera node, we connect to node #2 in order to run include/galera_cluster.inc
#
--connect node_2a, 127.0.0.1, root, , test, $NODE_MYPORT_2
--source include/galera_cluster_master_slave.inc

--connection node_2
--disable_query_log
--eval CHANGE MASTER TO MASTER_HOST='127.0.0.1', MASTER_PORT=$NODE_MYPORT_1;
--enable_query_log
START SLAVE USER='root';
SET SESSION wsrep_sync_wait = 0;

--connection node_1
CREATE TABLE t1 (f1 INTEGER PRIMARY KEY) ENGINE=InnoDB;

--connection node_2
--sleep 1
--let $wait_condition = SELECT COUNT(*) = 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 't1';
--source include/wait_condition.inc

# Step #2. Force async slave to go non-primary

SET GLOBAL wsrep_provider_options = 'gmcast.isolate=1';

--connect node_3, 127.0.0.1, root, , test, $NODE_MYPORT_3
--connection node_3
--source include/wait_until_connected_again.inc
--let $wait_condition = SELECT VARIABLE_VALUE = 2 FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc

# Step #3. Force async replication to fail by creating a replication event while the slave is non-prim

--connection node_1
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);

--connection node_2
--sleep 5

--let $value = query_get_value(SHOW SLAVE STATUS, Last_SQL_Error, 1)
--connection node_3
--disable_query_log
--eval SELECT "$value" IN ("Error 'WSREP has not yet prepared node for application use' on query. Default database: 'test'. Query: 'BEGIN'", "Node has dropped from cluster") AS expected_error
--enable_query_log

# Step #4. Bring back the async slave and restart replication
--connection node_2
SET GLOBAL wsrep_provider_options = 'gmcast.isolate=0';

--connection node_3
--source include/wait_until_connected_again.inc
--let $wait_condition = SELECT VARIABLE_VALUE = 3 FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc

--connection node_2
--source include/galera_wait_ready.inc
--source include/wait_until_connected_again.inc

START SLAVE;

# Confirm that the replication events have arrived

--let $wait_condition = SELECT COUNT(*) = 5 FROM t1;
--source include/wait_condition.inc

--connection node_1
DROP TABLE t1;

--sleep 2
--connection node_2
--let $wait_condition = SELECT COUNT(*) = 0 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 't1';
--source include/wait_condition.inc

STOP SLAVE;
RESET SLAVE ALL;

CALL mtr.add_suppression("Slave SQL: Error 'Unknown command' on query");
CALL mtr.add_suppression("Slave: Unknown command Error_code: 1047");
CALL mtr.add_suppression("Send action \\{\\(nil\\), 323, TORDERED\\} returned -107 \\(Transport endpoint is not connected\\)");
CALL mtr.add_suppression("Send action \\{\\(nil\\), 328, TORDERED\\} returned -107 \\(Transport endpoint is not connected\\)");
CALL mtr.add_suppression("Send action \\{\\(nil\\), 384, TORDERED\\} returned -107 \\(Transport endpoint is not connected\\)");
CALL mtr.add_suppression("Slave SQL for channel '': Error 'WSREP has not yet prepared node for application use' on query");
CALL mtr.add_suppression("Slave: WSREP has not yet prepared node for application use Error_code: MY-001047");
CALL mtr.add_suppression("(Transport endpoint is not connected|Socket is not connected)");
CALL mtr.add_suppression("Operation not permitted");
CALL mtr.add_suppression("Slave SQL for channel '': Error in Xid_log_event: Commit could not be completed, 'Deadlock found when trying to get lock; try restarting transaction'");
CALL mtr.add_suppression("Slave SQL for channel '': Node has dropped from cluster");


--connection node_1
RESET MASTER;
