--source include/galera_cluster.inc

#
# Test a local transaction being aborted by a slave one while it is running a GET_LOCK()
#

CREATE TABLE t1 (f1 INTEGER PRIMARY KEY) ENGINE=InnoDB;

--let $galera_connection_name = node_2a
--let $galera_server_number = 2
--source include/galera_connect.inc
--connection node_2a
SELECT GET_LOCK("foo", 1000);

--connection node_2
SET AUTOCOMMIT=OFF;
--let $wsrep_local_bf_aborts_before = `SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_local_bf_aborts'`
INSERT INTO t1 VALUES (1);
--send SELECT GET_LOCK("foo", 1000);

--connection node_1
INSERT INTO t1 VALUES (1);

--connection node_2
--error ER_LOCK_DEADLOCK
--reap

--let $wsrep_local_bf_aborts_after = `SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_local_bf_aborts'`

# Check that wsrep_local_bf_aborts has been incremented by exactly 1
--disable_query_log
--eval SELECT $wsrep_local_bf_aborts_after - $wsrep_local_bf_aborts_before = 1 AS wsrep_local_aborts_increment;
--enable_query_log

DROP TABLE t1;

#
# GET_LOCK is still not fully supported by Galera and listed as limitation
# part of it works part of it may not work.
# One such case is when error occurs while INSERTing duplicate data
# to auto-incremented column.
#
--connection node_1
--echo #node-1

connect(con_node_1a, localhost, root,,);
#
use test;
--let $existing_sql_mode = `SELECT @@sql_mode`
--let $existing_sql_log_bin = `SELECT @@session.sql_log_bin`

--disable_warnings
set @@sql_mode = 'NO_AUTO_VALUE_ON_ZERO';
--enable_warnings
set @@session.sql_log_bin = 0;

select get_lock("lock-1", 100000);
create table t1 (c1 int auto_increment unique key) engine=innodb;
insert into t1 values ('a');
--error ER_DUP_ENTRY
insert into t1 values ('a');

--eval set @@session.sql_log_bin = $existing_sql_log_bin
--eval set @@sql_mode = default
#
disconnect con_node_1a;

--connection node_2
call mtr.add_suppression("Slave SQL: Error 'Unknown table 'test.t1'' on query.*");
call mtr.add_suppression("Ignoring error 'Unknown table 'test.t1'' on query.*");
call mtr.add_suppression("Query apply failed.*");

--connection node_1
drop table t1;
