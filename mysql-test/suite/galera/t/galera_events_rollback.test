#
# Test event rollback under Galera
#

--source include/galera_cluster.inc
--source include/have_debug_sync.inc

#
# Test setup
#
--connection node_1
--echo # node 1

--let $event_scheduler_orig = `SELECT @@event_scheduler;`

CREATE TABLE t1(id INT PRIMARY KEY, f2 INT) ENGINE=INNODB;
INSERT INTO t1 VALUES(1, 0);

--let $wsrep_local_bf_aborts_before = `SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_local_bf_aborts'`

#
# Create the event (but disabled)
#
SET GLOBAL event_scheduler = ON;

DELIMITER |;
CREATE EVENT foo
	ON SCHEDULE AT CURRENT_TIMESTAMP
	ON COMPLETION PRESERVE
	DISABLE
	DO BEGIN
		SET DEBUG_SYNC = "ha_innobase_update_row SIGNAL before_commit WAIT_FOR commit_ok";
		SET DEBUG_SYNC = "pxc_event_worker_thread_end SIGNAL event_completed";
		UPDATE test.t1 SET f2 = 11 WHERE id = 1;
	END|
DELIMITER ;|

--connection node_2
--echo # node 2

#
# Ensure that the event has propagated to node 2
#
--let $wait_condition = SELECT COUNT(*) = 1 FROM INFORMATION_SCHEMA.EVENTS WHERE EVENT_NAME = "foo";
--source include/wait_condition.inc


--connection node_1
--echo # node 1

#
# Run the event
#
ALTER EVENT foo
	ON SCHEDULE AT CURRENT_TIMESTAMP
	ENABLE;

#
# Ensure that we have reached the sync point before continuing
#
SET DEBUG_SYNC = "now WAIT_FOR before_commit";


--connection node_2
--echo # node 2

#
# Make an update on node 2, this will case the Update Event
# on node 1 to be BF aborted
#
--echo # This should cause the event on node 1 to be BF aborted
UPDATE test.t1 SET f2 = 2222 WHERE id = 1;


--connection node_1
--echo # node_1

# There is no need to send the signal since the thread will be
# BF aborted
#SET DEBUG_SYNC = "now SIGNAL commit_ok";

#
# Ensure that the update has replicated to node 1
#
--let $wait_condition = SELECT f2 = 2222 FROM t1 WHERE id = 1;
--source include/wait_condition.inc

#
# Ensure that the event worker thread has completed
#
SET DEBUG_SYNC = "now WAIT_FOR event_completed";

--let $assert_text = The Local Update has aborted the Event Update
--let $assert_cond = f2 = 2222 FROM t1 where id = 1
--let $assert_debug = SELECT * FROM t1
--source include/assert.inc

#
# Check that wsrep_local_bf_aborts has been incremented by exactly 1
#
--let $wsrep_local_bf_aborts_after = `SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_local_bf_aborts'`
--let $assert_text = wsrep_local_bf_aborts has been incremented once
--let $assert_cond = $wsrep_local_bf_aborts_after - $wsrep_local_bf_aborts_before = 1 AS wsrep_local_aborts_increment;
--source include/assert.inc

# Cleanup
DROP TABLE t1;
DROP EVENT foo;
--eval SET GLOBAL event_scheduler = $event_scheduler_orig;
SET DEBUG_SYNC = "RESET";

--connection node_2
--let $wait_condition = SELECT COUNT(*) = 0 FROM INFORMATION_SCHEMA.EVENTS WHERE EVENT_NAME = "foo";
--source include/wait_condition.inc
