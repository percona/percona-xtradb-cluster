#
# This test verifies that in rsync based state transfer,
# 1. SST traffic encryption is not done when encrypt = 0
# 2. Encryption is done via stunnel when encrypt =4
# 3. Encryption can work when certificates are specified using relative paths (certs are in the datadir)
#

--source include/galera_cluster.inc
--source include/force_restart.inc

# Save the datadirs
--let $NODE1_DATADIR=`SELECT @@datadir`
--connection node_2
--let $NODE2_DATADIR=`SELECT @@datadir`
--connection node_1
--echo [connection node_1]

# Check that the cluster started correctly.
--let $wait_condition = SELECT VARIABLE_VALUE = 2 FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_cluster_size';
--source include/wait_condition.inc

SELECT 1;

# --------------------------------------
# Test 1: Test with encrypt=0 (default)
# Donor: 0
# Joiner: 0
# Expectation: SST should be successful.
# --------------------------------------

# Create a temporary cnf file for testing with encrypt=0
--let $RELATIVE_SSL_CERTS_FILE = $MYSQLTEST_VARDIR/tmp/galera_sst_rsync_encrypt.cnf
--copy_file $MYSQLTEST_VARDIR/my.cnf $RELATIVE_SSL_CERTS_FILE
--append_file $RELATIVE_SSL_CERTS_FILE
[sst]
ssl-ca=cacert.pem
ssl-key=server-key.pem
ssl-cert=server-cert.pem
encrypt=0
wsrep-debug=1
EOF

--echo # Restart node2 using relative paths for SSL certs
--connection node_2
--echo [connection node_2]
--echo # Shutting down node2
--source include/shutdown_mysqld.inc

# remove the grastate.dat file to force an SST
--remove_file $MYSQLTEST_VARDIR/mysqld.2/data/grastate.dat

# restart the server with relative cert paths (SST)
--echo # restarting node2 (with SST)
--let $error_log=$MYSQLTEST_VARDIR/tmp/error.log
--let $restart_parameters = "restart: --defaults-file=$RELATIVE_SSL_CERTS_FILE --log-error=$error_log"
--replace_result $RELATIVE_SSL_CERTS_FILE RELATIVE_SSL_CERTS_FILE $error_log ERROR_LOG
--source include/start_mysqld.inc

# Check that the cluster started correctly.
SET SESSION wsrep_sync_wait = 0;
--let $wait_condition = SELECT VARIABLE_VALUE = 2 FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_cluster_size';
--source include/wait_condition.inc

# Confirm that transfer was not SSL-encrypted
--let $assert_text = Using encrypt=0
--let $assert_select = Using encrypt=0
--let $assert_count = 1
--let $assert_file = $error_log
--let $assert_only_after = CURRENT_TEST
--source include/assert_grep.inc

# Cleanup
--remove_file $error_log
--source include/shutdown_mysqld.inc

# --------------------------------
# Test 2: Test with different encrypt options
# Donor: 0
# Joiner: 4
# Expectation: SST should fail.
# --------------------------------

# copy over the server-side PEM files needed for SSL to node1 datadir
--copy_file $MYSQL_TEST_DIR/std_data/cacert.pem $NODE1_DATADIR/cacert.pem
--copy_file $MYSQL_TEST_DIR/std_data/server-cert.pem $NODE1_DATADIR/server-cert.pem
--copy_file $MYSQL_TEST_DIR/std_data/server-key.pem $NODE1_DATADIR/server-key.pem

# copy over the server-side PEM files needed for SSL to node2 datadir
--copy_file $MYSQL_TEST_DIR/std_data/cacert.pem $NODE2_DATADIR/cacert.pem
--copy_file $MYSQL_TEST_DIR/std_data/server-cert.pem $NODE2_DATADIR/server-cert.pem
--copy_file $MYSQL_TEST_DIR/std_data/server-key.pem $NODE2_DATADIR/server-key.pem

# Create a temporary cnf file for testing with encrypt=4
--remove_file $RELATIVE_SSL_CERTS_FILE
--copy_file $MYSQLTEST_VARDIR/my.cnf $RELATIVE_SSL_CERTS_FILE
--append_file $RELATIVE_SSL_CERTS_FILE
[sst]
ssl-ca=cacert.pem
ssl-key=server-key.pem
ssl-cert=server-cert.pem

encrypt=4
wsrep-debug=1
EOF

# remove the grastate.dat file to force an SST
--remove_file $MYSQLTEST_VARDIR/mysqld.2/data/grastate.dat

# Rrestart node2 with encrypt=4
# Startup failure is expected due to incompatible protocol
--error 134
--exec $MYSQLD --defaults-group-suffix=.2 --defaults-file=$RELATIVE_SSL_CERTS_FILE > $error_log 2>&1

# Restart node_2 normally
--let $restart_parameters =
--let $_expect_file_name= $MYSQLTEST_VARDIR/tmp/mysqld.2.expect
--replace_result $RELATIVE_SSL_CERTS_FILE RELATIVE_SSL_CERTS_FILE
--source include/start_mysqld.inc

# Check that the cluster started correctly.
--let $wait_condition = SELECT VARIABLE_VALUE = 2 FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_cluster_size';
--source include/wait_condition.inc

# Confirm that SST failed due to incompatible protocol
--let $assert_text = rsync server on the other end has incompatible protocol
--let $assert_select = rsync server on the other end has incompatible protocol
--let $assert_count = 1
--let $assert_file = $MYSQLTEST_VARDIR/log/mysqld.1.err
--let $assert_only_after = CURRENT_TEST
--source include/assert_grep.inc

# Add test suppressions
--connection node_1
--echo [connection node_1]
CALL mtr.add_suppression("rsync returned code 12");
CALL mtr.add_suppression("rsync server on the other end has incompatible protocol");
CALL mtr.add_suppression("WSREP: Command did not run: wsrep_sst_rsync");
CALL mtr.add_suppression("WSREP: Process completed with error.*");
CALL mtr.add_suppression("State transfer to .* failed: .*Protocol error");

# Cleanup
--remove_file $error_log
--connection node_2
--echo [connection node_2]
--source include/shutdown_mysqld.inc

# --------------------------------
# Test 3: Test with encrypt=4
# Donor: 4
# Joiner: 4
# Expectation: SST should be successful using stunnel.
# --------------------------------

# Create a temporary cnf file for testing with encrypt=4
--remove_file $RELATIVE_SSL_CERTS_FILE
--copy_file $MYSQLTEST_VARDIR/my.cnf $RELATIVE_SSL_CERTS_FILE
--append_file $RELATIVE_SSL_CERTS_FILE
[sst]
ssl-ca=cacert.pem
ssl-key=server-key.pem
ssl-cert=server-cert.pem

encrypt=4
wsrep-debug=1
EOF

--connection node_1
--echo [connection node_1]
# restart node_1 with relative cert paths
--echo # restarting node1
--let $restart_parameters = "restart: --defaults-file=$RELATIVE_SSL_CERTS_FILE "
--let $_expect_file_name= $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--exec echo "wait" > $_expect_file_name
--replace_result $RELATIVE_SSL_CERTS_FILE RELATIVE_SSL_CERTS_FILE
--source include/restart_mysqld.inc

# remove the grastate.dat file to force an SST
--remove_file $MYSQLTEST_VARDIR/mysqld.2/data/grastate.dat

# Restart node_2 normally
--connection node_2
--echo [connection node_2]
--let $restart_parameters = "restart: --defaults-file=$RELATIVE_SSL_CERTS_FILE "
--let $_expect_file_name= $MYSQLTEST_VARDIR/tmp/mysqld.2.expect
--replace_result $RELATIVE_SSL_CERTS_FILE RELATIVE_SSL_CERTS_FILE
--source include/start_mysqld.inc

# Check that the cluster started correctly.
--let $wait_condition = SELECT VARIABLE_VALUE = 2 FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_cluster_size';
--source include/wait_condition.inc

# Confirm that SST is successful
--let $assert_text = Using encrypt=4
--let $assert_select = Using encrypt=4
--let $assert_count = 1
--let $assert_file = $MYSQLTEST_VARDIR/log/mysqld.2.err
--let $assert_only_after = CURRENT_TEST
--source include/assert_grep.inc

--let $assert_text = Using stunnel for SSL encryption
--let $assert_select = Using stunnel for SSL encryption
--let $assert_count = 1
--let $assert_file = $MYSQLTEST_VARDIR/log/mysqld.2.err
--let $assert_only_after = CURRENT_TEST
--source include/assert_grep.inc

# Cleanup
--remove_file $RELATIVE_SSL_CERTS_FILE

--remove_file $NODE1_DATADIR/cacert.pem
--remove_file $NODE1_DATADIR/server-cert.pem
--remove_file $NODE1_DATADIR/server-key.pem

--remove_file $NODE2_DATADIR/cacert.pem
--remove_file $NODE2_DATADIR/server-cert.pem
--remove_file $NODE2_DATADIR/server-key.pem
