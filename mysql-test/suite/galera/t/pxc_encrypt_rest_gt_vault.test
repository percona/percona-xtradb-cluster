
#
#
--source include/big_test.inc
--source include/have_innodb.inc
--source include/have_keyring_vault_plugin.inc
--source include/galera_cluster.inc


# Force a restart at the end of the test
--source include/force_restart.inc

--let $VAULT_CONF_FILE_1=$MYSQLTEST_VARDIR/std_data/keyring_vault_confs/pxc_encrypt_rest_gt_vault_57_1.conf
--let $VAULT_CONF_FILE_2=$MYSQLTEST_VARDIR/std_data/keyring_vault_confs/pxc_encrypt_rest_gt_vault_57_2.conf

--echo # Check to see if the vault server is up-and-running
--let $KEYRING_CONF_FILE_1=$VAULT_CONF_FILE_1
--source suite/keyring_vault/is_vault_server_up.inc

#
# This test-case will cover data-at-rest encryption scenarios.
# MySQL-5.7 introduced
# - file-per-tablespace encryption.
# PS start with 5.7.21-21 extended this to support encryption of
# - general tablespace
# - temporary tablespace
# - binlog encryption


#===============================================================================
# general tablespace encryption support

#-------------------------------------------------------------------------------
# direct repliction of encrypted tablespace
#
--connection node_1
--echo #node-1
use test;
CREATE TABLESPACE foo ADD DATAFILE 'foo.ibd' ENCRYPTION='Y';
#
create table t1 (i int, primary key pk(i)) tablespace foo encryption='y';
--error ER_ILLEGAL_HA_CREATE_OPTION
create table t2 (i int, primary key pk(i)) tablespace foo encryption='n';
#
insert into t1 values (1), (2), (3);
select * from t1;
show create table t1;

--connection node_2
--echo #node-2
select * from t1;
show create table t1;
#
create table t2 (i int, primary key pk(i)) tablespace foo encryption='y';
insert into t2 values (10), (20), (30);

--connection node_1
--echo #node-1
show create table t2;
drop table t1, t2;
drop tablespace foo;

#-------------------------------------------------------------------------------
# sst of the encrypted table
#
--connection node_2
--echo #node-2 being killed
--source include/kill_galera.inc

--connection node_1
--echo #node-1
--let $wait_condition = SELECT VARIABLE_VALUE = 1 FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc
#
use test;
CREATE TABLESPACE foo ADD DATAFILE 'foo.ibd' ENCRYPTION='Y';
#
create table t1 (i int, primary key pk(i)) tablespace foo encryption='y';
--error ER_ILLEGAL_HA_CREATE_OPTION
create table t2 (i int, primary key pk(i)) tablespace foo encryption='n';
#
insert into t1 values (1), (2), (3);
select * from t1;
show create table t1;

--connection node_2
--echo #node-2 restarted (should get encrypted table through SST)
--source include/start_mysqld.inc
call mtr.add_suppression(".*can contain only an ENCRYPTED tables.*");

--let $wait_condition = SELECT VARIABLE_VALUE = 2 FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc

select * from t1;
show create table t1;
#
create table t2 (i int, primary key pk(i)) tablespace foo encryption='y';
insert into t2 values (10), (20), (30);

--connection node_1
--echo #node-1
show create table t2;
drop table t1, t2;
drop tablespace foo;


#-------------------------------------------------------------------------------
# ist of the encrypted table
#
--connection node_2
--echo #node-2 being shutdown
--source include/shutdown_mysqld.inc

--connection node_1
--echo #node-1
# this is to ensure IST happens with smaller data-set
--let $wait_condition = SELECT VARIABLE_VALUE = 1 FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc
#
use test;
CREATE TABLESPACE foo ADD DATAFILE 'foo.ibd' ENCRYPTION='Y';
#
create table t1 (i int, primary key pk(i)) tablespace foo encryption='y';
--error ER_ILLEGAL_HA_CREATE_OPTION
create table t2 (i int, primary key pk(i)) tablespace foo encryption='n';
#
insert into t1 values (1);
select * from t1;
show create table t1;

--connection node_2
--echo #node-2 restarted (should get encrypted table through IST)
--source include/start_mysqld.inc
call mtr.add_suppression(".*can contain only an ENCRYPTED tables.*");

--let $wait_condition = SELECT VARIABLE_VALUE = 2 FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc

select * from t1;
show create table t1;
#
create table t2 (i int, primary key pk(i)) tablespace foo encryption='y';
insert into t2 values (10), (20), (30);

--connection node_1
--echo #node-1
show create table t2;
drop table t1, t2;
drop tablespace foo;

# Delete mount points
-- echo # Deleting the mount points
--connection node_1
--let $MOUNT_POINT_SERVICE_OP=DELETE
--let $KEYRING_CONF_FILE=$VAULT_CONF_FILE_1
--source pxc_mount_point_service.inc

call mtr.add_suppression("Plugin keyring_vault reported: 'There is no vault_ca.*");

--connection node_2
--let $MOUNT_POINT_SERVICE_OP=DELETE
--let $KEYRING_CONF_FILE=$VAULT_CONF_FILE_2
--source pxc_mount_point_service.inc

call mtr.add_suppression("Plugin keyring_vault reported: 'There is no vault_ca.*");
