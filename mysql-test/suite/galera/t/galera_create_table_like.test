--source include/galera_cluster.inc

#
# Test the various forms of CREATE TABLE LIKE ... , since Galera has special handling
# for them, especially when one of the tables is a temporary one.
#

CREATE SCHEMA schema1;
CREATE SCHEMA schema2;

USE schema1;
CREATE TABLE real_table (f1 INTEGER) ENGINE=InnoDB;
CREATE TEMPORARY TABLE temp_table (f1 INTEGER) ENGINE=InnoDB;
SET SESSION wsrep_replicate_myisam=ON;
CREATE TABLE myisam_table (f1 INTEGER) ENGINE=MyISAM;

USE schema2;
CREATE TABLE real_table1 LIKE schema1.real_table;
CREATE TABLE real_table2 LIKE schema1.temp_table;
CREATE TABLE real_table3 LIKE schema1.myisam_table;

CREATE TEMPORARY TABLE temp_table1 LIKE schema1.real_table;
CREATE TEMPORARY TABLE temp_table2 LIKE schema1.temp_table;
CREATE TEMPORARY TABLE temp_table3 LIKE schema1.myisam_table;

--connection node_2
# Only the non-temporary tables are replicated, regardless of the type of table they are based on

SELECT COUNT(*) = 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'real_table' AND TABLE_SCHEMA = 'schema1';
SELECT COUNT(*) = 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'myisam_table' AND TABLE_SCHEMA = 'schema1';
SELECT COUNT(*) = 0 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'temp_table' AND TABLE_SCHEMA = 'schema1';

SELECT COUNT(*) = 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'real_table1' AND TABLE_SCHEMA = 'schema2';
SELECT COUNT(*) = 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'real_table2' AND TABLE_SCHEMA = 'schema2';
SELECT COUNT(*) = 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'real_table3' AND TABLE_SCHEMA = 'schema2';

SELECT COUNT(*) = 0 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'temp_table1' AND TABLE_SCHEMA = 'schema2';
SELECT COUNT(*) = 0 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'temp_table2' AND TABLE_SCHEMA = 'schema2';
SELECT COUNT(*) = 0 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'temp_table3' AND TABLE_SCHEMA = 'schema2';

--connection node_1
DROP TABLE schema1.real_table;
DROP TABLE schema1.myisam_table;

DROP TABLE schema2.real_table1;
DROP TABLE schema2.real_table2;
DROP TABLE schema2.real_table3;

DROP SCHEMA schema1;
DROP SCHEMA schema2;

#
# Scenario that involves mix of temporary and non-temporary as part of single
# drop statement.
#

--connection node_1
--echo #node-1
use test;
create table t1 (c1 int) engine=innodb;
create table t2 (c1 int) engine=innodb;
insert into t1 values (1);
insert into t2 values (2);
#
create temporary table t1 (c1 int) engine=innodb;
create temporary table tmp (c1 int) engine=innodb;
insert into tmp values (100);
#
create table ctas2 select * from tmp;
select * from ctas2;
# this will use t1 <temporary> but replication may endup using t1 <persistent>
create table ctas1 select * from t1;
select count(*) = 0 from ctas1;

--connection node_2
--echo #node-2
call mtr.add_suppression("Slave SQL: Error \'Table \'test.tmp\' doesn\'t exist\' on query.*");
call mtr.add_suppression("Ignoring error 'Table 'test.tmp' doesn't exist'");
call mtr.add_suppression("Slave SQL: Error \'Unknown table \'test.ctas2\'\' on query.*");
call mtr.add_suppression("Ignoring error 'Unknown table 'test.ctas2''");
call mtr.add_suppression("Query apply failed.*");
use test;
select * from t1;
select * from t2;
#
--let $wait_condition = SELECT COUNT(*) = 1 FROM ctas1
--source include/wait_condition.inc
select count(*) = 1 from ctas1;
#
--error ER_NO_SUCH_TABLE
select * from ctas2;

--connection node_1
--echo #node-1
# this statement create a mix of temporary and non-temporary object.
# temporary objects are not replicated but statement is replicated
# completely w/o stripping off temporary objects and so we create
# a dummy temporary object for statement to pass on slave.
drop table t2, t1;
insert into t1 values (11);
drop table ctas1;
drop table ctas2;

--connection node_2
--echo #node-2
select * from t1;
drop table t1;

#-------------------------------------------------------------------------------
#
# Scenario that involves use of CTAS (CREATE TABLE ... AS SELECT)
#

#-------------------------------------------------------------------------------
--connection node_1
--echo #node-1
--let $wsrep_replicate_myisam_orig = `SELECT @@wsrep_replicate_myisam`
--let $default_se = `SELECT @@default_storage_engine`

#-------------------------------------------------------------------------------
--connection node_1
--echo #node-1 (create empty seed tables used for as part of SELECT clause)
use test;
create table src_i (i int, primary key pk(i)) engine=innodb;
create table src_m (j int, primary key pk(j)) engine=myisam;
create table src_i2 (i int, primary key pk(i)) engine=innodb;
create table src_m2 (j int, primary key pk(j)) engine=myisam;
insert into src_i2 values (1), (2);
insert into src_m2 values (1), (2);
#
--connection node_2
--echo #node-2 (ensure seed tables are replicated to node-2)
# NOTE: MyISAM DDL is replicate ir-repsective of wsrep_replicate_myisam setting.
# this setting is applicable only for DML
--let $wait_condition = SELECT COUNT(*) = 4 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME LIKE 'src_%'
--source include/wait_condition.inc

#-----
# use-case-1: CTAS with empty tables
#-----

#-------------------------------------------------------------------------------
--connection node_1
--echo #node-1 (Fire CTAS with wsrep_replicate_myisam = 1)
set wsrep_replicate_myisam = 1;
select @@wsrep_replicate_myisam;
create table t1 engine=innodb as select * from src_i;
create table t2 engine=innodb as select * from src_m;
create table t3 engine=innodb as select 1;
create table t4 engine=innodb as select 1 from src_i;
create table t5 engine=innodb as select 1 from src_m;
create table t6 engine=myisam as select * from src_i;
create table t7 engine=myisam as select * from src_m;
create table t8 engine=myisam as select 1;
create table t9 engine=myisam as select 1 from src_i;
create table t10 engine=myisam as select 1 from src_m;
# these tables has innodb and myisam both as part of SELECT
create table t11 engine=innodb as select * from src_i, src_m;
create table t12 engine=myisam as select * from src_i, src_m;
#
select * from t1;
select * from t2;
select * from t3;
select * from t4;
select * from t5;
select * from t6;
select * from t7;
select * from t8;
select * from t9;
select * from t10;
select * from t11;
select * from t12;

--connection node_2
--echo #node-2 (check if all the tables are replicate)
# NOTE: CTAS is not pure DDL but DDL + DML so MyISAM setting wsrep_replicate_myisam should
# dictate what is replicated. But given that CTAS has inconsistency (GTID and XID bug#93948)
# and MyISAM support is experimental it may be removed in future release replicating CTAS
# as pure DDL from PXC perspective. So even if user has set wsrep_replicate_myisam = 0
# and CTAS causes table to get loaded then this is allowed.
--let $wait_condition = SELECT COUNT(*) = 12 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME REGEXP 't[0-9]+';
--source include/wait_condition.inc
#
select * from t1;
select * from t2;
select * from t3;
select * from t4;
select * from t5;
select * from t6;
select * from t7;
select * from t8;
select * from t9;
select * from t10;
select * from t11;
select * from t12;
drop table t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;

#-------------------------------------------------------------------------------
--connection node_1
--echo #node-1 (Fire CTAS with wsrep_replicate_myisam = 0)
set wsrep_replicate_myisam = 0;
select @@wsrep_replicate_myisam;
create table t1 engine=innodb as select * from src_i;
create table t2 engine=innodb as select * from src_m;
create table t3 engine=innodb as select 1;
create table t4 engine=innodb as select 1 from src_i;
create table t5 engine=innodb as select 1 from src_m;
create table t6 engine=myisam as select * from src_i;
create table t7 engine=myisam as select * from src_m;
create table t8 engine=myisam as select 1;
create table t9 engine=myisam as select 1 from src_i;
create table t10 engine=myisam as select 1 from src_m;
# these tables has innodb and myisam both as part of SELECT
create table t11 engine=innodb as select * from src_i, src_m;
create table t12 engine=myisam as select * from src_i, src_m;
#
select * from t1;
select * from t2;
select * from t3;
select * from t4;
select * from t5;
select * from t6;
select * from t7;
select * from t8;
select * from t9;
select * from t10;
select * from t11;
select * from t12;

--connection node_2
--echo #node-2 (check if all the tables are replicate)
# NOTE: CTAS is not pure DDL but DDL + DML so MyISAM setting wsrep_replicate_myisam should
# dictate what is replicated. But given that CTAS has inconsistency (GTID and XID bug#93948)
# and MyISAM support is experimental it may be removed in future release replicating CTAS
# as pure DDL from PXC perspective. So even if user has set wsrep_replicate_myisam = 0
# and CTAS causes table to get loaded then this is allowed.
--let $wait_condition = SELECT COUNT(*) = 12 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME REGEXP 't[0-9]+';
--source include/wait_condition.inc
#
select * from t1;
select * from t2;
select * from t3;
select * from t4;
select * from t5;
select * from t6;
select * from t7;
select * from t8;
select * from t9;
select * from t10;
select * from t11;
select * from t12;
drop table t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;

#-----
# use-case-2: CTAS with non-empty tables
#-----

#-------------------------------------------------------------------------------
--connection node_1
--echo #node-1 (Fire CTAS with wsrep_replicate_myisam = 1)
set wsrep_replicate_myisam = 1;
select @@wsrep_replicate_myisam;
create table t1 engine=innodb as select * from src_i2;
create table t2 engine=innodb as select * from src_m2;
create table t3 engine=innodb as select 1;
create table t4 engine=innodb as select 1 from src_i2;
create table t5 engine=innodb as select 1 from src_m2;
create table t6 engine=myisam as select * from src_i2;
create table t7 engine=myisam as select * from src_m2;
create table t8 engine=myisam as select 1;
create table t9 engine=myisam as select 1 from src_i2;
create table t10 engine=myisam as select 1 from src_m2;
# these tables has innodb and myisam both as part of SELECT
create table t11 engine=innodb as select * from src_i2, src_m2;
create table t12 engine=myisam as select * from src_i2, src_m2;
#
select * from t1;
select * from t2;
select * from t3;
select * from t4;
select * from t5;
select * from t6;
select * from t7;
select * from t8;
select * from t9;
select * from t10;
select * from t11;
select * from t12;

--connection node_2
--echo #node-2 (check if all the tables are replicate)
# NOTE: CTAS is not pure DDL but DDL + DML so MyISAM setting wsrep_replicate_myisam should
# dictate what is replicated. But given that CTAS has inconsistency (GTID and XID bug#93948)
# and MyISAM support is experimental it may be removed in future release replicating CTAS
# as pure DDL from PXC perspective. So even if user has set wsrep_replicate_myisam = 0
# and CTAS causes table to get loaded then this is allowed.
--let $wait_condition = SELECT COUNT(*) = 12 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME REGEXP 't[0-9]+';
--source include/wait_condition.inc
#
select * from t1;
select * from t2;
select * from t3;
select * from t4;
select * from t5;
select * from t6;
select * from t7;
select * from t8;
select * from t9;
select * from t10;
select * from t11;
select * from t12;
drop table t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;

#-------------------------------------------------------------------------------
--connection node_1
--echo #node-1 (Fire CTAS with wsrep_replicate_myisam = 0)
set wsrep_replicate_myisam = 0;
select @@wsrep_replicate_myisam;
create table t1 engine=innodb as select * from src_i2;
create table t2 engine=innodb as select * from src_m2;
create table t3 engine=innodb as select 1;
create table t4 engine=innodb as select 1 from src_i2;
create table t5 engine=innodb as select 1 from src_m2;
create table t6 engine=myisam as select * from src_i2;
create table t7 engine=myisam as select * from src_m2;
create table t8 engine=myisam as select 1;
create table t9 engine=myisam as select 1 from src_i2;
create table t10 engine=myisam as select 1 from src_m2;
# these tables has innodb and myisam both as part of SELECT
create table t11 engine=innodb as select * from src_i2, src_m2;
create table t12 engine=myisam as select * from src_i2, src_m2;
#
select * from t1;
select * from t2;
select * from t3;
select * from t4;
select * from t5;
select * from t6;
select * from t7;
select * from t8;
select * from t9;
select * from t10;
select * from t11;
select * from t12;

--connection node_2
--echo #node-2 (check if all the tables are replicate)
# NOTE: CTAS is not pure DDL but DDL + DML so MyISAM setting wsrep_replicate_myisam should
# dictate what is replicated. But given that CTAS has inconsistency (GTID and XID bug#93948)
# and MyISAM support is experimental it may be removed in future release replicating CTAS
# as pure DDL from PXC perspective. So even if user has set wsrep_replicate_myisam = 0
# and CTAS causes table to get loaded then this is allowed.
--let $wait_condition = SELECT COUNT(*) = 12 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME REGEXP 't[0-9]+';
--source include/wait_condition.inc
#
select * from t1;
select * from t2;
select * from t3;
select * from t4;
select * from t5;
select * from t6;
select * from t7;
select * from t8;
select * from t9;
select * from t10;
select * from t11;
select * from t12;
drop table t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;


#-----
# use-case-3: CREATE TABLE AS SELECT with empty tables
#-----

#-------------------------------------------------------------------------------
--connection node_1
--echo #node-1 (Fire CREATE TABLE LIKE with wsrep_replicate_myisam = 1)
create table tctl1 like src_i;
create table tctl2 like src_m;
set default_storage_engine = 'MyISAM';
create table tctl3 like src_i;
create table tctl4 like src_m;
set default_storage_engine = 'InnoDB';
#
select * from tctl1;
select * from tctl2;
select * from tctl3;
select * from tctl4;

--connection node_2
--echo #node-2 (check if all the tables are replicate)
# CREATE TABLE LIKE should replicate ir-respective of destination table.
--let $wait_condition = SELECT COUNT(*) = 4 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME LIKE 'tctl%'
--source include/wait_condition.inc
#
select * from tctl1;
select * from tctl2;
select * from tctl3;
select * from tctl4;
drop table tctl1, tctl2, tctl3, tctl4;

#-------------------------------------------------------------------------------
--connection node_1
--echo #node-1 (Fire CREATE TABLE LIKE with wsrep_replicate_myisam = 0)
set wsrep_replicate_myisam = 0;
select @@wsrep_replicate_myisam;
create table tctl1 like src_i;
create table tctl2 like src_m;
set default_storage_engine = 'MyISAM';
create table tctl3 like src_i;
create table tctl4 like src_m;
set default_storage_engine = 'InnoDB';
#
select * from tctl1;
select * from tctl2;
select * from tctl3;
select * from tctl4;

--connection node_2
--echo #node-2 (check if all the tables are replicate)
# CREATE TABLE LIKE should replicate ir-respective of destination table.
--let $wait_condition = SELECT COUNT(*) = 4 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME LIKE 'tctl%'
--source include/wait_condition.inc
#
select * from tctl1;
select * from tctl2;
select * from tctl3;
select * from tctl4;
drop table tctl1, tctl2, tctl3, tctl4;

#-----
# use-case-4: CREATE TABLE AS SELECT with non-empty tables
#-----

#-------------------------------------------------------------------------------
--connection node_1
--echo #node-1 (Fire CREATE TABLE LIKE with wsrep_replicate_myisam = 1)
create table tctl1 like src_i2;
create table tctl2 like src_m2;
set default_storage_engine = 'MyISAM';
create table tctl3 like src_i2;
create table tctl4 like src_m2;
set default_storage_engine = 'InnoDB';
#
select * from tctl1;
select * from tctl2;
select * from tctl3;
select * from tctl4;

--connection node_2
--echo #node-2 (check if all the tables are replicate)
# CREATE TABLE LIKE should replicate ir-respective of destination table.
--let $wait_condition = SELECT COUNT(*) = 4 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME LIKE 'tctl%'
--source include/wait_condition.inc
#
select * from tctl1;
select * from tctl2;
select * from tctl3;
select * from tctl4;
drop table tctl1, tctl2, tctl3, tctl4;

#-------------------------------------------------------------------------------
--connection node_1
--echo #node-1 (Fire CREATE TABLE LIKE with wsrep_replicate_myisam = 0)
set wsrep_replicate_myisam = 0;
select @@wsrep_replicate_myisam;
create table tctl1 like src_i2;
create table tctl2 like src_m2;
set default_storage_engine = 'MyISAM';
create table tctl3 like src_i2;
create table tctl4 like src_m2;
set default_storage_engine = 'InnoDB';
#
select * from tctl1;
select * from tctl2;
select * from tctl3;
select * from tctl4;

--connection node_2
--echo #node-2 (check if all the tables are replicate)
# CREATE TABLE LIKE should replicate ir-respective of destination table.
--let $wait_condition = SELECT COUNT(*) = 4 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME LIKE 'tctl%'
--source include/wait_condition.inc
#
select * from tctl1;
select * from tctl2;
select * from tctl3;
select * from tctl4;
drop table tctl1, tctl2, tctl3, tctl4;

#-------------------------------------------------------------------------------
#
--connection node_1
--echo #node-1 (restore original setting)
drop table src_i, src_m, src_i2, src_m2;
--eval set @@default_storage_engine = $default_se;
--eval set wsrep_replicate_myisam = $wsrep_replicate_myisam_orig;
