#
# Test to check that DMLs are blocked when there is an ongoing inplace ALTER
# TABLE.
#
--source include/have_debug.inc
--source include/have_debug_sync.inc
--source include/have_log_bin.inc
--source include/galera_cluster.inc
--source include/count_sessions.inc

# Clear the binlogs before starting the test
RESET MASTER;

# Don't make threads wait
--let $wsrep_sync_wait_saved = `SELECT @@GLOBAL.wsrep_sync_wait`
SET GLOBAL wsrep_sync_wait = 0;

# Create auxiliary connections on node1
--connect(node_1_1, 127.0.0.1, root, , test, $NODE_MYPORT_1)
--connect(node_1_2, 127.0.0.1, root, , test, $NODE_MYPORT_1)

--connection node_1
CREATE TABLE t1 (a INTEGER PRIMARY KEY);

--echo # --------------------------------
--echo # Test 1: Execute ALTER TABLE on node2 (Remote)
--echo # --------------------------------

--connection node_1
--let $debug_point = halt_alter_table_after_lock_downgrade
--source include/add_debug_point.inc

# Execute ALTER TABLE from node2
--connection node_2
ALTER TABLE t1 ENGINE = InnoDB;

--connection node_1
SET DEBUG_SYNC = 'now WAIT_FOR alter_table_inplace_after_downgrade';

--connection node_1_2
--send INSERT INTO test.t1 VALUES(10)

--connection node_1_1
SET SESSION wsrep_sync_wait = 0;
--let $wait_condition = SELECT State = "Waiting for table metadata lock" FROM information_schema.processlist WHERE info = "INSERT INTO test.t1 VALUES(10)";
--source include/wait_condition.inc

# Assert that INSERT query is waiting for the metadata lock
--let $state= `SELECT State FROM information_schema.processlist WHERE info = "INSERT INTO test.t1 VALUES(10)"`
--let $assert_text= INSERT query should be waiting for the metadata lock.
--let $assert_cond= "$state" = "Waiting for table metadata lock"
--source include/assert.inc

SET DEBUG_SYNC = 'now SIGNAL continue_inplace_alter';
SET DEBUG_SYNC = 'RESET';

--connection node_1_2
--reap

SELECT * FROM t1;

# Assert that INSERT query commits after the ALTER query
--let $limit= 2,10
--let $event_sequence= Anonymous_Gtid # Query/.*CREATE TABLE.* # Anonymous_Gtid # Query/.*ALTER TABLE.* # Anonymous_Gtid # Query/.*BEGIN # Table_map # Write_rows # Xid
--source include/assert_binlog_events.inc

--echo # --------------------------------
--echo # Test 2: Execute ALTER TABLE on node1 (Local)
--echo # --------------------------------

# Clear the binlogs before starting the next test
RESET MASTER;

# Execute ALTER TABLE from node1
--connection node_1
--send ALTER TABLE t1 ENGINE = InnoDB;

--connection node_1_1
SET DEBUG_SYNC = 'now WAIT_FOR alter_table_inplace_after_downgrade';

--connection node_1_2
--send INSERT INTO test.t1 VALUES(11)

--connection node_1_1
SET SESSION wsrep_sync_wait = 0;
--let $wait_condition = SELECT State = "Waiting for table metadata lock" FROM information_schema.processlist WHERE info = "INSERT INTO test.t1 VALUES(11)";
--source include/wait_condition.inc

# Assert that INSERT query is waiting for the metadata lock
--let $state= `SELECT State FROM information_schema.processlist WHERE info = "INSERT INTO test.t1 VALUES(11)"`
--let $assert_text= INSERT query should be waiting for the metadata lock.
--let $assert_cond= "$state" = "Waiting for table metadata lock"
--source include/assert.inc

SET DEBUG_SYNC = 'now SIGNAL continue_inplace_alter';
SET DEBUG_SYNC = 'RESET';

--connection node_1
--reap

--connection node_1_2
--reap

SELECT * FROM t1;

# Assert that INSERT query commits after the ALTER query
--let $limit= 2,10
--let $event_sequence= Anonymous_Gtid # Query/.*ALTER TABLE.* # Anonymous_Gtid # Query/.*BEGIN # Table_map # Write_rows # Xid
--source include/assert_binlog_events.inc

--echo # --------------------------------
--echo # Test 3: Testing with wsrep_OSU_method = "RSU"
--echo # --------------------------------

# Clear the binlogs before starting the next test
RESET MASTER;

--connection node_1
SET SESSION wsrep_OSU_method = "RSU";
--send ALTER TABLE t1 ENGINE = InnoDB;

--connection node_1_1
SET DEBUG_SYNC = 'now WAIT_FOR alter_table_inplace_after_downgrade';

--connection node_1_2
--send INSERT INTO test.t1 VALUES(12)

--connection node_1_1
SET SESSION wsrep_sync_wait = 0;
--let $wait_condition = SELECT State = "Waiting for table metadata lock" FROM information_schema.processlist WHERE info = "INSERT INTO test.t1 VALUES(12)";
--source include/wait_condition.inc

# Assert that INSERT query is waiting for the metadata lock
--let $state= `SELECT State FROM information_schema.processlist WHERE info = "INSERT INTO test.t1 VALUES(12)"`
--let $assert_text= INSERT query should be waiting for the metadata lock.
--let $assert_cond= "$state" = "Waiting for table metadata lock"
--source include/assert.inc

SET DEBUG_SYNC = 'now SIGNAL continue_inplace_alter';
SET DEBUG_SYNC = 'RESET';

--connection node_1
--reap

--connection node_1_2
--reap

SELECT * FROM t1;

# Reset the wsrep_OSU_method
--connection node_1
SET SESSION wsrep_OSU_method = DEFAULT;

# Assert that INSERT query commits after the ALTER query
--let $limit= 2,10
--let $event_sequence= Anonymous_Gtid # Query/.*ALTER TABLE.* # Anonymous_Gtid # Query/.*BEGIN # Table_map # Write_rows # Xid
--source include/assert_binlog_events.inc

# Reset the debug point before further testing.
--source include/remove_debug_point.inc

--echo # --------------------------------
--echo # Test 4: Testing with ALGORITHM and LOCK syntax.
--echo # --------------------------------

--enable_info
ALTER TABLE t1 ADD COLUMN b INTEGER;
ALTER TABLE t1 ADD INDEX i1(b), LOCK= DEFAULT;

--echo # In the below tests, ALTER TABLE with LOCK=NONE is not supported for the
--echo # reason that it needs SHARED LOCK during the execution on the query.

# Tests for default algorithm
--error ER_ALTER_OPERATION_NOT_SUPPORTED
ALTER TABLE t1 ADD INDEX i2(b), LOCK= NONE;
ALTER TABLE t1 ADD INDEX i2(b), LOCK= SHARED;
ALTER TABLE t1 ADD INDEX i3(b), LOCK= EXCLUSIVE;

# Tests inplace add index
--error ER_ALTER_OPERATION_NOT_SUPPORTED
ALTER TABLE t1 ADD INDEX i4(b), ALGORITHM=INPLACE, LOCK= NONE;
ALTER TABLE t1 ADD INDEX i4(b), ALGORITHM=INPLACE, LOCK= SHARED;
ALTER TABLE t1 ADD INDEX i5(b), ALGORITHM=INPLACE, LOCK= EXCLUSIVE;

# Tests forced inplace algorithm for changing the engine (LOCK=NONE is not supported)
--error ER_ALTER_OPERATION_NOT_SUPPORTED
ALTER TABLE t1 ENGINE=InnoDB, ALGORITHM= INPLACE, LOCK= NONE;
ALTER TABLE t1 ENGINE=InnoDB, ALGORITHM= INPLACE, LOCK= SHARED;
ALTER TABLE t1 ENGINE=InnoDB, ALGORITHM= INPLACE, LOCK= EXCLUSIVE;

# Tests for inplace rename column (LOCK=NONE is not supported)
--error ER_ALTER_OPERATION_NOT_SUPPORTED
ALTER TABLE t1 CHANGE COLUMN b c INT, ALGORITHM= INPLACE, LOCK= NONE;
ALTER TABLE t1 CHANGE COLUMN b c INT, ALGORITHM= INPLACE, LOCK= SHARED;
ALTER TABLE t1 CHANGE COLUMN c b INT, ALGORITHM= INPLACE, LOCK= EXCLUSIVE;

SHOW CREATE TABLE t1;

# Tests for inplace drop index (LOCK=NONE is not supported)
ALTER TABLE t1 DROP INDEX i2, ALGORITHM= INPLACE, LOCK= DEFAULT;
--error ER_ALTER_OPERATION_NOT_SUPPORTED
ALTER TABLE t1 DROP INDEX i3, ALGORITHM= INPLACE, LOCK= NONE;
ALTER TABLE t1 DROP INDEX i4, ALGORITHM= INPLACE, LOCK= SHARED;
ALTER TABLE t1 DROP INDEX i5, ALGORITHM= INPLACE, LOCK= EXCLUSIVE;

# Tests for inplace rename table (needs Exclusive lock)
--error ER_ALTER_OPERATION_NOT_SUPPORTED
ALTER TABLE t1 RENAME TO t2, ALGORITHM= INPLACE, LOCK= NONE;
--error ER_ALTER_OPERATION_NOT_SUPPORTED
ALTER TABLE t1 RENAME TO t2, ALGORITHM= INPLACE, LOCK= SHARED;
ALTER TABLE t1 RENAME TO t2, ALGORITHM= INPLACE, LOCK= EXCLUSIVE;
ALTER TABLE t2 RENAME TO t1, ALGORITHM= INPLACE, LOCK= DEFAULT;

--disable_info
--connection node_2
CALL mtr.add_suppression("LOCK=NONE is not supported for this operation. Try LOCK=SHARED.");
CALL mtr.add_suppression("LOCK=NONE is not supported. Reason: COPY algorithm requires a lock. Try LOCK=SHARED.");
CALL mtr.add_suppression("LOCK=NONE/SHARED is not supported for this operation. Try LOCK=EXCLUSIVE.");

# Cleanup
--disconnect node_1_1
--disconnect node_1_2
--connection node_1
--eval SET GLOBAL wsrep_sync_wait = $wsrep_sync_wait_saved;
DROP TABLE t1;

--source include/wait_until_count_sessions.inc
