# ==== Purpose ===
#
# This test verifies that DDLs bf-abort the local transactions when threadpool
# is enabled.
#
# === References ===
#
# PXC-3118: BF abort for MDL conflict stuck when Thread Pool used

--source include/galera_cluster.inc
--source include/count_sessions.inc

# Check that threadpool is enabled.
SELECT @@thread_handling;

# Create auxiliary connections for the test.
--connect(con1,localhost,root,,test, $NODE_MYPORT_1)
--connect(con2,localhost,root,,test, $NODE_MYPORT_1)

--connection con1
CREATE TABLE t1(i INT PRIMARY KEY);
INSERT INTO t1 VALUES (1),(2),(3);

# Capture the `wsrep_local_bf_aborts` status var.
--let $wsrep_local_bf_aborts_before = `SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_local_bf_aborts'`

# Lock few rows
BEGIN;
SELECT * FROM t1 FOR UPDATE;

# Perform a DDL on the same node from a different client session.
# Without the fix to PXC-3118, the below TRUCATE TABLE query shall
# wait on an MDL failing to bf-abort the local transaction.
--connection con2
TRUNCATE TABLE t1;

# Check that the session has been killed
--connection con1
--error ER_LOCK_DEADLOCK
SELECT * FROM t1;

# Validate that wsrep_local_bf_aborts has been incremented once
--let $wsrep_local_bf_aborts_after = `SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_local_bf_aborts'`
--let $assert_text = wsrep_local_bf_aborts has been incremented once
--let $assert_cond = $wsrep_local_bf_aborts_after - $wsrep_local_bf_aborts_before = 1
--source include/assert.inc

--disconnect con1
--disconnect con2

# Cleanup
--connection node_1
DROP TABLE t1;
--source include/wait_until_count_sessions.inc
