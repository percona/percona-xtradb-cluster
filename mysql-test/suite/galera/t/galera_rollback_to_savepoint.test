--source include/galera_cluster.inc
--source include/have_debug_sync.inc

#
# ROLLBACK to savepoint should only rollback the said action.
#

--connection node_1
--echo #node-1
use test;

CREATE TABLE example (id INT NOT NULL PRIMARY KEY, name VARCHAR(64));
INSERT INTO example VALUES(0, 'zero');

BEGIN;
INSERT INTO example VALUES(1, 'first!');
SAVEPOINT savepoint001;
ROLLBACK TO SAVEPOINT savepoint001;
INSERT INTO example VALUES(2, 'second');
COMMIT;

SELECT * FROM example;

--connection node_2
--echo #node-2
SELECT * FROM example;

--connection node_1
--echo #node-1
DROP TABLE example;

#
# ROLLBACK to savepoint leading to empty transaction
#
--connection node_1
--echo #node-1
use test;

CREATE TABLE example (id INT NOT NULL PRIMARY KEY, name VARCHAR(64));

BEGIN;
SAVEPOINT savepoint001;
INSERT INTO example VALUES(2, 'second');
SELECT * FROM example;
ROLLBACK TO SAVEPOINT savepoint001;
COMMIT;

SELECT * FROM example;

--connection node_2
--echo #node-2
SELECT * FROM example;

--connection node_1
--echo #node-1
DROP TABLE example;


#-------------------------------------------------------------------------------
#
# Background running applier/high priority transaction kills local transaction
# at ROLLBACK TO SAVEPOINT stage.
#

--connection node_1
--echo #node-1
#
use test;
create table t1 (i int, j int, primary key pk(i));
create table t3 (i int, primary key pk(i));
insert into t1 values (1, 1), (2, 2), (3, 3), (4, 4);
insert into t3 values (100), (200), (300), (400);
select * from t1;
select * from t3;

#
SET SESSION wsrep_sync_wait = 0;
SET DEBUG_SYNC = "pxc_rollback_to_savepoint SIGNAL entered1 WAIT_FOR continue1";
#
begin;
update t1 set i = i + 10;
savepoint s1;
update t3 set i = i + 1000;
select * from t1;
select * from t3;
--send rollback to savepoint s1;

--connect node_1a, 127.0.0.1, root, , test, $NODE_MYPORT_1
--connection node_1a
--echo #node-1a
SET SESSION wsrep_sync_wait = 0;
SET DEBUG_SYNC = "now WAIT_FOR entered1";
use test;
alter table t1 add index idx(j);
SET DEBUG_SYNC = "now SIGNAL continue1";

--connection node_1
--echo #node-1
--error ER_LOCK_DEADLOCK
--reap
select * from t1;
select * from t3;
insert into t1 values (100, 1);
select * from t1;
rollback;
select * from t1;
#
SET DEBUG_SYNC = 'RESET';
drop table t1, t3;

#-------------------------------------------------------------------------------
#
# Background running applier/high priority transaction kills local transaction
# at ROLLBACK TO SAVEPOINT stage.
# local transaction has all changes part of the savepoint
#

--connection node_1
--echo #node-1
#
use test;
create table t1 (i int, j int, primary key pk(i));
create table t3 (i int, primary key pk(i));
insert into t1 values (1, 1), (2, 2), (3, 3), (4, 4);
insert into t3 values (100), (200), (300), (400);
select * from t1;
select * from t3;

#
SET SESSION wsrep_sync_wait = 0;
SET DEBUG_SYNC = "pxc_rollback_to_savepoint SIGNAL entered1 WAIT_FOR continue1";
#
begin;
savepoint s1;
update t1 set i = i + 10;
update t3 set i = i + 1000;
select * from t1;
select * from t3;
--send rollback to savepoint s1;

--connection node_1a
--echo #node-1a
SET SESSION wsrep_sync_wait = 0;
SET DEBUG_SYNC = "now WAIT_FOR entered1";
use test;
alter table t1 add index idx(j);
SET DEBUG_SYNC = "now SIGNAL continue1";

--connection node_1
--echo #node-1
--error ER_LOCK_DEADLOCK
--reap
select * from t1;
select * from t3;
insert into t1 values (100, 1);
select * from t1;
rollback;
select * from t1;
#
SET DEBUG_SYNC = 'RESET';
drop table t1, t3;

#-------------------------------------------------------------------------------
#
# Trigger action fails causing transaction to rollback and commit as emptry transaction.
#
create table t1 (id int, c char(10), primary key pk(id));
create table t2 (id int, c char(10), primary key pk(id));
create trigger ins_t2 after insert on t1 for each row insert into t2 values (new.id);
begin;
--error ER_WRONG_VALUE_COUNT_ON_ROW
insert into t1 values (1, 'portugal');
commit;
select * from t1;
select * from t2;
#
drop trigger ins_t2;
drop table t1, t2;
