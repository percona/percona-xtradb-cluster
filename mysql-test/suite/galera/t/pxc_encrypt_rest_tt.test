
#
#
--source include/big_test.inc
--source include/galera_cluster.inc

# Force a restart at the end of the test
--source include/force_restart.inc

#
# this test-case test encrpytion of temporary tablespace
#

#-------------------------------------------------------------------------------
# prerequisite for running test.
#
CREATE TABLE ten (f1 INTEGER);
INSERT INTO ten VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10);


#-------------------------------------------------------------------------------
# direct repliction of encrypted tablespace
#
--connection node_1
--echo #node-1
use test;
CREATE TEMPORARY TABLE t1 (f1 INTEGER AUTO_INCREMENT PRIMARY KEY, f2 INTEGER) Engine=InnoDB;
INSERT INTO t1 (f2) SELECT a1.f1 FROM ten AS a1, ten AS a2, ten AS a3, ten AS a4;
#
select purpose from information_schema.innodb_session_temp_tablespaces where space in (select space from information_schema.innodb_temp_table_info);
select name, encryption from information_schema.innodb_tablespaces where name like '%innodb_temporary%';
#

--connection node_2
--echo #node-2
use test;
CREATE TEMPORARY TABLE t1 (f1 INTEGER AUTO_INCREMENT PRIMARY KEY, f2 INTEGER) Engine=InnoDB;
INSERT INTO t1 (f2) SELECT a1.f1 FROM ten AS a1, ten AS a2, ten AS a3, ten AS a4;
#
select purpose from information_schema.innodb_session_temp_tablespaces where space in (select space from information_schema.innodb_temp_table_info);
select name, encryption from information_schema.innodb_tablespaces where name like '%innodb_temporary%';
#
DROP TABLE t1;

--connection node_1
--echo #node-1
DROP TABLE t1;

#-------------------------------------------------------------------------------
# sst of the encrypted table
#
--connection node_2
--echo #node-2 being killed
--source include/kill_galera.inc

--connection node_1
--echo #node-1
--let $wait_condition = SELECT VARIABLE_VALUE = 1 FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc
#
CREATE TEMPORARY TABLE e1 (
  id INT NOT NULL,
  text VARCHAR(10) DEFAULT NULL,
  PRIMARY KEY (id)
);
INSERT INTO e1 VALUES(1, 'aaaaa');
INSERT INTO e1 VALUES(2, 'bbbbb');
SELECT * FROM e1;
#
select name, encryption from information_schema.innodb_tablespaces where name like '%innodb_temporary%';

--connection node_2
--echo #node-2 restarted (should get encrypted table through SST)
--source include/start_mysqld.inc

--let $wait_condition = SELECT VARIABLE_VALUE = 2 FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc
#
select name, encryption from information_schema.innodb_tablespaces where name like '%innodb_temporary%';

CREATE TEMPORARY TABLE e1 (
  id INT NOT NULL,
  text VARCHAR(10) DEFAULT NULL,
  PRIMARY KEY (id)
);
INSERT INTO e1 VALUES(1, 'ccccc');
INSERT INTO e1 VALUES(2, 'ddddd');
SELECT * FROM e1;
DROP TABLE e1;
#

--connection node_1
--echo #node-1
DROP TABLE e1;

#-------------------------------------------------------------------------------
# ist of the encrypted table
#
--connection node_2
--echo #node-2 being shutdown 
--source include/shutdown_mysqld.inc

--connection node_1
--echo #node-1
--let $wait_condition = SELECT VARIABLE_VALUE = 1 FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc
#
CREATE TEMPORARY TABLE e1 (
  id INT NOT NULL,
  text VARCHAR(10) DEFAULT NULL,
  PRIMARY KEY (id)
);
INSERT INTO e1 VALUES(1, 'aaaaa');
INSERT INTO e1 VALUES(2, 'bbbbb');
#
select name, encryption from information_schema.innodb_tablespaces where name like '%innodb_temporary%';

--connection node_2
--echo #node-2 restarted (should get encrypted table through IST)
--source include/start_mysqld.inc

--let $wait_condition = SELECT VARIABLE_VALUE = 2 FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc

#
select name, encryption from information_schema.innodb_tablespaces where name like '%innodb_temporary%';

CREATE TEMPORARY TABLE e1 (
  id INT NOT NULL,
  text VARCHAR(10) DEFAULT NULL,
  PRIMARY KEY (id)
);
INSERT INTO e1 VALUES(1, 'ccccc');
INSERT INTO e1 VALUES(2, 'ddddd');
DROP TABLE e1;

--connection node_1
--echo #node-1
DROP TABLE e1;
