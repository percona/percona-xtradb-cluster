#
# Test Lock table interaction with RSU
--source include/galera_cluster.inc
--source include/have_debug_sync.inc
--source suite/galera/include/galera_have_debug_sync.inc

--connection node_1
CREATE TABLE t1 (f1 INTEGER);
LOCK TABLE t1 WRITE;
--echo value prior to RSU:
SHOW STATUS LIKE 'wsrep_desync_count';
SHOW VARIABLES LIKE 'wsrep_desync';

--connect node_1a, 127.0.0.1, root, , test, $NODE_MYPORT_1
--connection node_1a
SET SESSION wsrep_sync_wait = 0;
SET SESSION wsrep_osu_method = RSU;
--send ALTER TABLE t1 ADD COLUMN f2 INTEGER;

--connect node_1b, 127.0.0.1, root, , test, $NODE_MYPORT_1
--connection node_1b
SET SESSION wsrep_sync_wait = 0;
SET SESSION wsrep_osu_method = RSU;
--send ALTER TABLE t1 ADD COLUMN f3 INTEGER;

--sleep 5
--connection node_1
--echo value during RSU:
SHOW STATUS LIKE 'wsrep_desync_count';
SHOW VARIABLES LIKE 'wsrep_desync';

--let $galera_sync_point = after_synced_cb
--source include/galera_set_sync_point.inc

UNLOCK TABLES;

--connection node_1a
--reap
--connection node_1b
--reap

--connection node_1

# We need to wait for "synced" callback, since the variable
# wsrep_desync_count shows the actual state of the desync
# counter, but synchronization takes some time:

--source include/galera_wait_sync_point.inc
--source include/galera_clear_sync_point.inc
--source include/galera_signal_sync_point.inc

--echo value after RSU:
SHOW STATUS LIKE 'wsrep_desync_count';
SHOW VARIABLES LIKE 'wsrep_desync';
SET GLOBAL wsrep_desync=0;

DROP TABLE t1;
