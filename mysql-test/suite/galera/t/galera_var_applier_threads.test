#
# This tests the very basic operations around wsrep-applier-threads
# More complex scenarios will be tested separately in the context of
# parallel replication
#

--source include/galera_cluster.inc

--let $wsrep_applier_threads_orig = `SELECT @@wsrep_applier_threads`

--connection node_1
--echo #node-1
CREATE TABLE t1 (f1 INT PRIMARY KEY) Engine=InnoDB;
CREATE TABLE t2 (f1 INT AUTO_INCREMENT PRIMARY KEY) Engine=InnoDB;

--connection node_2
--echo #node-2
# Setting wsrep_applier_threads to zero triggers a warning
SET GLOBAL wsrep_applier_threads = 0;
SHOW WARNINGS;
SELECT @@wsrep_applier_threads = 1;

SET GLOBAL wsrep_applier_threads = 1;
# There is a separate wsrep_aborter thread at all times
SELECT COUNT(*) = 2 FROM performance_schema.processlist WHERE USER = 'system user';
SELECT COUNT(*) = 1 FROM performance_schema.processlist WHERE USER = 'system user' AND STATE LIKE 'wsrep aborter idle';

#
# Increase the number of applier threads. The change takes effect immediately
#

SET GLOBAL wsrep_applier_threads = 64;
--sleep 0.5

--connection node_1
--echo #node-1
INSERT INTO t1 VALUES (1);

--connection node_2
--echo #node-2
SELECT COUNT(*) = 1 FROM t1;

# Wait until we know that all threads have been started in MySQL
--let $wait_condition = SELECT COUNT(*) = @@wsrep_applier_threads + 1 FROM performance_schema.processlist WHERE USER = 'system user'
--source include/wait_condition.inc
--echo # this should emit presence of 64 applier threads
SELECT COUNT(*) = @@wsrep_applier_threads + 1 FROM performance_schema.processlist WHERE USER = 'system user';
SELECT COUNT(*) = 1 FROM performance_schema.processlist WHERE USER = 'system user' AND STATE LIKE 'wsrep aborter idle';

#
# Reduce the number of applier threads. The change is not immediate -- a thread will only exit after a replication event
#
SET GLOBAL wsrep_applier_threads = 1;

--connection node_1
--echo #node-1
# Generate 64 replication events
--let $count = 64
while ($count)
{
  INSERT INTO t2 VALUES (DEFAULT);
  --dec $count
}

--connection node_2
--echo #node-2
--let $wait_condition = SELECT COUNT(*) = 64 FROM t2;
--source include/wait_condition.inc

SELECT COUNT(*) = 64 FROM t2;
SET wsrep_sync_wait=0;

--let $wait_condition = SELECT COUNT(*) = @@wsrep_applier_threads + 1 FROM performance_schema.processlist WHERE USER = 'system user'
--source include/wait_condition.inc

--echo # this should emit presence of 1 applier thread
SELECT COUNT(*) = @@wsrep_applier_threads + 1 FROM performance_schema.processlist WHERE USER = 'system user';
SELECT COUNT(*) = 1 FROM performance_schema.processlist WHERE USER = 'system user' AND STATE LIKE 'wsrep aborter idle';

--let $wsrep_cluster_address_node2 = `SELECT @@wsrep_cluster_address`
--let $wsrep_provider_node2 = `SELECT @@wsrep_provider`

SET GLOBAL wsrep_applier_threads = 5;
--sleep 1
--let $wait_condition = SELECT COUNT(*) = @@wsrep_applier_threads + 1 FROM performance_schema.processlist WHERE USER = 'system user'
--source include/wait_condition.inc

--echo # this should emit presence of 5 applier threads
SELECT COUNT(*) = @@wsrep_applier_threads + 1 FROM performance_schema.processlist WHERE USER = 'system user';
SELECT COUNT(*) = 1 FROM performance_schema.processlist WHERE USER = 'system user' AND STATE LIKE 'wsrep aborter idle';

#
# test phase for bug https://github.com/codership/mysql-wsrep/issues/319
#

# shutdown node 2
--connection node_2
--echo Shutting down server ...
--source include/shutdown_mysqld.inc

# wait until node_1 is ready as one node cluster
--connection node_1
SET wsrep_sync_wait=0;
--let $wait_condition = SELECT VARIABLE_VALUE = 1 FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc
show status like 'wsrep_cluster_size';

# step up applier threads to 6, and make sure all appliers and rollbacker thread are running
SET GLOBAL wsrep_applier_threads = 6;
--let $wait_condition = SELECT COUNT(*) = @@wsrep_applier_threads + 1 FROM performance_schema.processlist WHERE USER = 'system user'
--source include/wait_condition.inc

# change to invalid cluster address
SET GLOBAL wsrep_applier_threads = 1;
SET GLOBAL wsrep_cluster_address='';

# join back to single node cluster
SET GLOBAL wsrep_cluster_address='gcomm://';
--source include/wait_until_connected_again.inc

# we should have 1 applier thread now
--let $wait_condition = SELECT COUNT(*) = @@wsrep_applier_threads + 1 FROM performance_schema.processlist WHERE USER = 'system user'
--source include/wait_condition.inc

# test if we can increase applier count now (fails in bug #319)
SET GLOBAL wsrep_applier_threads = 10;
--let $wait_condition = SELECT COUNT(*) = @@wsrep_applier_threads + 1 FROM performance_schema.processlist WHERE USER = 'system user'
--source include/wait_condition.inc

# restart node 2
--connection node_2
--source include/start_mysqld.inc
--source include/wait_until_connected_again.inc

SELECT COUNT(*) = @@wsrep_applier_threads + 1 FROM performance_schema.processlist WHERE USER = 'system user';

# 
#
# cleanup to original state
#
--connection node_1
--eval SET GLOBAL wsrep_applier_threads = $wsrep_applier_threads_orig

--connection node_2
--eval SET GLOBAL wsrep_applier_threads = $wsrep_applier_threads_orig

# Generate 64 replication events, to help node 1 to purge excessive applier threads
--let $count = 64
while ($count)
{
  INSERT INTO t2 VALUES (DEFAULT);
  --dec $count
}

--connection node_1
# Generate 64 replication events, to help node 2 to purge excessive applier threads
--let $count = 64
while ($count)
{
  INSERT INTO t2 VALUES (DEFAULT);
  --dec $count
}

--let $wait_condition = SELECT COUNT(*) = @@wsrep_applier_threads + 1 FROM performance_schema.processlist WHERE USER = 'system user'
--source include/wait_condition.inc


--connection node_2

--let $wait_condition = SELECT COUNT(*) = @@wsrep_applier_threads + 1 FROM performance_schema.processlist WHERE USER = 'system user'
--source include/wait_condition.inc

DROP TABLE t1;
DROP TABLE t2;
