# === Purpose ===
# This test verifies that updats on read only schemas are successfully
# processed by wsrep applier threads.
#
# Test Galera as a replica to a MySQL master
#
# === Reference ===
# PXC-4137: WSREP applier threads fail to modify read only schemas
#
# Note: The galera/galera_2node_slave.cnf describes the setup of the nodes

--source include/have_log_bin.inc

# As node_1 is not a Galera node, we connect to node_2 in order to run include/galera_cluster.inc
--connect node_2a, 127.0.0.1, root, , test, $NODE_MYPORT_2
--source include/galera_cluster_master_slave.inc

--connection node_2
--echo # connection node_2
--source include/galera_wait_ready.inc

--connection node_2
--echo # connection node_2
--disable_query_log
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$NODE_MYPORT_1;
--enable_query_log
START REPLICA USER='root';

--connection node_1
--echo # connection node_1
CREATE DATABASE testdb;

# Ensure that replication is working
--connection node_2
--echo # connection node_2
--let $wait_condition = SELECT COUNT(*) = 1 FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME='testdb';
--source include/wait_condition.inc

--connect node_3, 127.0.0.1, root, , test, $NODE_MYPORT_3
--echo # connection node_3
--let $wait_condition = SELECT COUNT(*) = 1 FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME='testdb';
--source include/wait_condition.inc

# Alter the schema to be read only in the PXC cluster
--connection node_2
--echo # connection node_2
ALTER SCHEMA testdb READ ONLY = 1;

# Assert that the schema is read only on node_2
--error ER_SCHEMA_READ_ONLY
CREATE TABLE testdb.tt1 (i INT PRIMARY KEY);

# Assert that the schema is read only on node_3
--connection node_3
--echo # connection node_3
--error ER_SCHEMA_READ_ONLY
CREATE TABLE testdb.tt1 (i INT PRIMARY KEY);

# Now perform some basic operations on node_1. Since the table is not read only
# on node_1, these operations should be successful on node_1.
--connection node_1
--echo # connection node_1
use testdb;
CREATE TABLE t1(i int PRIMARY KEY);
INSERT INTO t1 VALUES(1),(2),(3),(4);
UPDATE t1 SET i=i+10;
DELETE FROM t1 WHERE i>11;

--connection node_2
--echo # connection node_2

# Wait for node_2 to catch up
--let $wait_condition = SELECT COUNT(*) = 1 FROM testdb.t1;
--source include/wait_condition.inc

# Assert that table has only one row on node_2
--assert(`SELECT COUNT(*) = 1 FROM testdb.t1`)

# Assert that the schema is still read only on node_2
--error ER_SCHEMA_READ_ONLY
CREATE TABLE testdb.tt1 (i INT PRIMARY KEY);
--assert(`SELECT OPTIONS="READ ONLY=1" from INFORMATION_SCHEMA.SCHEMATA_EXTENSIONS WHERE SCHEMA_NAME='testdb'`)

# Assert that table has only one row on node_3
--connection node_3
--echo # connection node_3
--assert(`SELECT COUNT(*) = 1 FROM testdb.t1`)

# Assert that the schema is still read only
--error ER_SCHEMA_READ_ONLY
CREATE TABLE testdb.tt1 (i INT PRIMARY KEY);
--assert(`SELECT OPTIONS="READ ONLY=1" from INFORMATION_SCHEMA.SCHEMATA_EXTENSIONS WHERE SCHEMA_NAME='testdb'`)

# Verify that ALTER SCHEMA READ ONLY=0 is allowed
ALTER SCHEMA testdb READ ONLY = 0;

# Test cleanup
--connection node_1
DROP DATABASE testdb;

--connection node_2
--echo # connection node_2
STOP REPLICA;
RESET REPLICA ALL;

--disconnect node_3
--disconnect node_2a
--connection node_1
RESET MASTER;
