
#
#
--source include/big_test.inc
--source include/galera_cluster.inc

# Force a restart at the end of the test
--source include/force_restart.inc

#
# This test-case will cover data-at-rest encryption scenarios.
# MySQL-5.7 introduced
# - file-per-tablespace encryption.
# PS start with 5.7.21-21 extended this to support encryption of
# - general tablespace
# - temporary tablespace
# - binlog encryption


#===============================================================================
# file-per-tablespace encryption support

#-------------------------------------------------------------------------------
# direct repliction of encrypted tablespace
#
--connection node_1
--echo #node-1
use test;
create table t (i int, primary key pk(i)) encryption='y';
insert into t values (1), (2), (3);
select * from t;
show create table t;

create schema work2;
set session default_table_encryption=ON;
create schema work3;
set session default_table_encryption=OFF;
select schema_name, default_encryption from information_schema.schemata where schema_name like 'work%';

--connection node_2
--echo #node-2
#
select * from t;
show create table t;
#
select schema_name, default_encryption from information_schema.schemata where schema_name like 'work%';
#
drop table t;
drop database work2;
drop database work3;

#-------------------------------------------------------------------------------
# sst of the encrypted table
#
--connection node_2
--echo #node-2 being killed
--source include/kill_galera.inc

--connection node_1
--echo #node-1
--let $wait_condition = SELECT VARIABLE_VALUE = 1 FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc
#
CREATE TABLE e1 (
  id INT NOT NULL,
  text VARCHAR(10) DEFAULT NULL,
  PRIMARY KEY (id)
) ENCRYPTION='Y';
INSERT INTO e1 VALUES(1, 'aaaaa');
INSERT INTO e1 VALUES(2, 'bbbbb');
#
create schema work2;
set session default_table_encryption=ON;
create schema work3;
set session default_table_encryption=OFF;
select schema_name, default_encryption from information_schema.schemata where schema_name like 'work%';

--connection node_2
--echo #node-2 restarted (should get encrypted table through SST)
--source include/start_mysqld.inc

--let $wait_condition = SELECT VARIABLE_VALUE = 2 FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc
#
select schema_name, default_encryption from information_schema.schemata where schema_name like 'work%';

select * from e1;
show create table e1;
drop table e1;
drop database work2;
drop database work3;

#-------------------------------------------------------------------------------
# ist of the encrypted table
#
--connection node_2
--echo #node-2 being shutdown 
--source include/shutdown_mysqld.inc

--connection node_1
--echo #node-1
--let $wait_condition = SELECT VARIABLE_VALUE = 1 FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc
#
CREATE TABLE e1 (
  id INT NOT NULL,
  text VARCHAR(10) DEFAULT NULL,
  PRIMARY KEY (id)
) ENCRYPTION='Y';
INSERT INTO e1 VALUES(1, 'aaaaa');
INSERT INTO e1 VALUES(2, 'bbbbb');
#
create schema work2;
set session default_table_encryption=ON;
create schema work3;
set session default_table_encryption=OFF;
select schema_name, default_encryption from information_schema.schemata where schema_name like 'work%';

--connection node_2
--echo #node-2 restarted (should get encrypted table through IST)
--source include/start_mysqld.inc

--let $wait_condition = SELECT VARIABLE_VALUE = 2 FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_cluster_size'
--source include/wait_condition.inc
#
select schema_name, default_encryption from information_schema.schemata where schema_name like 'work%';

select * from e1;
show create table e1;
drop table e1;
drop database work2;
drop database work3;
