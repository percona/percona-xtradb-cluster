#
# This test checks that innodb_disallow_writes works as expected
#

--source include/galera_cluster.inc
--source include/have_innodb.inc
--source include/have_debug.inc

# Open a separate connection to be used to run SHOW PROCESSLIST
--let $galera_connection_name = node_1a
--let $galera_server_number = 1
--source include/galera_connect.inc
--connection node_1a
SET SESSION wsrep_sync_wait = 0;

# Enables some PROCESSLIST thread state to be maintained for testing
SET GLOBAL DEBUG = "d,thd_proc_info.wsrep_run_wsrep_commit";

--connection node_1
CREATE TABLE t1 (f1 INTEGER) Engine=InnoDB;
SET GLOBAL innodb_disallow_writes=ON;
--send INSERT INTO t1 VALUES (1);

--connection node_1a

# Why we need to switch this ?
# INSERT IS BLOCKED DUE TO DISALLOW_WRITE which in turn holds dict_sys mutex.
# SELECT ON INFORMATION_SCHEMA will create a new internal temporary table
# that needs dict_sys mutex.
# This result in blocking SELECT statement and so test-case can't proceed.
--let $internal_tmp_table = `SELECT @@internal_tmp_disk_storage_engine`
SET GLOBAL internal_tmp_disk_storage_engine = 'MyISAM';

let $wait_condition = SELECT 1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE INFO = 'INSERT INTO t1 VALUES (1)' AND State = 'wsrep: in pre-commit stage';
--source include/wait_condition.inc

--eval SET GLOBAL internal_tmp_disk_storage_engine = $internal_tmp_table

SET GLOBAL innodb_disallow_writes=OFF;

--connection node_1
--reap
SELECT COUNT(*) = 1 FROM t1;

SET GLOBAL DEBUG = "";

--connection node_2
SELECT COUNT(*) = 1 FROM t1;

DROP TABLE t1;
