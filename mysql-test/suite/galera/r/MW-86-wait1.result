SELECT @@debug_sync;
@@debug_sync
ON - signals: ''
set debug_sync='RESET';
SET SESSION wsrep_sync_wait = 1;
SET GLOBAL debug = "+d,sync.wsrep_apply_cb";
CREATE TABLE t_wait1 (f1 INTEGER) ENGINE=InnoDB;
INSERT INTO t_wait1 VALUES (1);
SET SESSION debug_sync = "now WAIT_FOR sync.wsrep_apply_cb_reached";
SHOW BINARY LOGS;
SHOW BINLOG EVENTS;
SHOW COLUMNS FROM t1;
SHOW CREATE EVENT e1;
SHOW CREATE FUNCTION f1;
SHOW CREATE PROCEDURE p1;
SHOW CREATE TABLE t1;
SHOW CREATE TRIGGER tr1;
SHOW CREATE VIEW v1;
SHOW DATABASES;
SHOW ENGINE InnoDB STATUS;
SHOW FUNCTION CODE f1;
SHOW FUNCTION STATUS;
SHOW GRANTS FOR 'root'@'localhost';
SHOW INDEX FROM t1;
SHOW OPEN TABLES;
SHOW PROCEDURE CODE p1;
SHOW PROCEDURE STATUS;
SHOW PRIVILEGES;
SHOW STATUS LIKE 'wsrep_cluster_size';
SHOW TABLE STATUS;
SHOW TABLES;
SHOW TRIGGERS;
SHOW GLOBAL VARIABLES LIKE 'foo_bar';
SHOW WARNINGS;
SET GLOBAL debug = "-d,sync.wsrep_apply_cb";
SET SESSION debug_sync = "now SIGNAL signal.wsrep_apply_cb";
SET SESSION wsrep_sync_wait = default;
DROP TABLE t_wait1;
SET GLOBAL wsrep_provider_options = 'repl.causal_read_timeout=PT0.5S';
# Node 1
CREATE TABLE t1(id INT PRIMARY KEY);
# Node 2 : block at the point right after we have left the commit monitor
SET SESSION wsrep_sync_wait = 0;
set GLOBAL debug = "+d,sync.wsrep_ordered_commit";
# Node 1 : Perform the insert. This will succeed on node1 but will block on node2
INSERT INTO t1 VALUES(1);
# Node 2 : Wait for the commit point
SET SESSION DEBUG_SYNC = "now WAIT_FOR sync.wsrep_ordered_commit_reached";
SET SESSION wsrep_sync_wait = 1;
# Node 2 : try a SELECT, this should timeout
SELECT COUNT(*) FROM t1;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction
# Node 2 : Unblock the commit point
SET GLOBAL debug = "-d,sync.wsrep_ordered_commit";
SET DEBUG_SYNC = "now SIGNAL signal.wsrep_ordered_commit_continue";
SET DEBUG_SYNC = "RESET";
SELECT COUNT(*) FROM t1;
COUNT(*)
1
SET SESSION wsrep_sync_wait = default;
DROP TABLE t1;
SELECT @@debug_sync;
@@debug_sync
ON - signals: ''
