CREATE DATABASE testdb;
USE testdb;
CREATE TABLE counter(id INT PRIMARY KEY AUTO_INCREMENT, count INT);
CREATE TABLE t1(id INT PRIMARY KEY AUTO_INCREMENT, f2 CHAR(64));
INSERT INTO t1(f2) VALUES(1);
CREATE USER 'testme'@'%' IDENTIFIED BY 'secret';
GRANT SELECT ON testdb.* TO 'testme'@'%';
GRANT INSERT ON testdb.counter TO 'testme'@'%';
CREATE USER 'testother'@'%' IDENTIFIED BY 'secret2';
FLUSH PRIVILEGES;
# connection node_1
use testdb;
SET GLOBAL debug= 'd,sql_cmd.before_toi_begin.log_command';
# connection node_2
use testdb;
SET GLOBAL debug= 'd,sql_cmd.before_toi_begin.log_command';
# connection node_testme
use testdb;
#
# SQLCOM_CREATE_TABLE access test
#
# connection node_1
GRANT CREATE ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, CREATE ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
CREATE TABLE t2(id INT PRIMARY KEY AUTO_INCREMENT);
INSERT INTO counter(count) VALUES(1);;
# connection node_1
include/assert.inc [Table t2 should exist on node 1]
# connection node_2
include/assert.inc [Table t2 should exist on node 2]
# connection node_1
REVOKE CREATE ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
DROP TABLE t2;
#
# SQLCOM_CREATE_INDEX access test
#
# connection node_1
GRANT INDEX ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, INDEX ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
CREATE INDEX index_t1_f2 ON t1(f2);
INSERT INTO counter(count) VALUES(2);;
# connection node_1
include/assert.inc [Index t1_f2 should exist on node 1]
# connection node_2
include/assert.inc [Index t1_f2 should exist on node 2]
# connection node_1
REVOKE INDEX ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
DROP INDEX index_t1_f2 ON t1;
#
# SQLCOM_ALTER_TABLE access test
#
# connection node_1
GRANT ALTER ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, ALTER ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
ALTER TABLE t1 ADD COLUMN f3 LONGBLOB;
INSERT INTO counter(count) VALUES(3);;
# connection node_1
include/assert.inc [Column f3 on table t1 should exist on node 1]
# connection node_2
include/assert.inc [Column f3 on table t1 should exist on node 2]
# connection node_1
REVOKE ALTER ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
ALTER TABLE t1 DROP COLUMN f3;
#
# SQLCOM_TRUNCATE access test
#
# connection node_1
GRANT DROP ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, DROP ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
TRUNCATE TABLE t1;
INSERT INTO counter(count) VALUES(4);;
# connection node_1
include/assert.inc [Table t1 was truncated on node 1]
# connection node_2
include/assert.inc [Table t1 was truncated on node 2]
# connection node_1
REVOKE DROP ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
INSERT INTO t1(f2) VALUES(1);
#
# SQLCOM_DROP_TABLE access test
#
# connection node_1
GRANT DROP ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, DROP ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
DROP TABLE t1;
INSERT INTO counter(count) VALUES(5);;
# connection node_1
include/assert.inc [Table t1 was dropped on node 1]
# connection node_2
include/assert.inc [Table t1 was dropped on node 2]
# connection node_1
REVOKE DROP ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
CREATE TABLE t1(id INT PRIMARY KEY AUTO_INCREMENT, f2 CHAR(64));
INSERT INTO t1(f2) VALUES(1);
#
# SQLCOM_DROP_INDEX access test
#
# connection node_1
CREATE INDEX t1_f2 ON t1(f2);
include/assert.inc [Index t1_f2 should exist on node 1]
# connection node_1
GRANT INDEX ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, INDEX ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
DROP INDEX t1_f2 ON t1;
INSERT INTO counter(count) VALUES(6);;
# connection node_1
include/assert.inc [Index t1_f2 should not exist on node 1]
# connection node_2
include/assert.inc [Index t1_f2 should not exist on node 2]
# connection node_1
REVOKE INDEX ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_GRANT access test
#
# connection node_1
GRANT GRANT OPTION ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%` WITH GRANT OPTION
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
GRANT SELECT ON testdb.* TO 'testother'@'%';
INSERT INTO counter(count) VALUES(7);;
# connection node_1
SHOW GRANTS FOR 'testother';
Grants for testother@%
GRANT USAGE ON *.* TO `testother`@`%`
GRANT SELECT ON `testdb`.* TO `testother`@`%`
# connection node_2
SHOW GRANTS FOR 'testother';
Grants for testother@%
GRANT USAGE ON *.* TO `testother`@`%`
GRANT SELECT ON `testdb`.* TO `testother`@`%`
# connection node_1
REVOKE GRANT OPTION ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_CREATE_DB access test
#
# connection node_testme
include/assert.inc [Database testdbother does not exist on node 1]
# connection node_1
GRANT CREATE ON *.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT CREATE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
CREATE DATABASE testdbother;
INSERT INTO counter(count) VALUES(8);;
# connection node_1
include/assert.inc [Database testdbother should exist on node 1]
# connection node_2
include/assert.inc [Database testdbother should exist on node 2]
# connection node_1
REVOKE CREATE ON *.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
DROP DATABASE testdbother;
#
# SQLCOM_DROP_DB access test
#
# connection node_1
CREATE DATABASE testdbother;
# connection node_2
# connection node_1
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
GRANT DROP ON *.* TO 'testme'@'%';
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
DROP DATABASE testdbother;
INSERT INTO counter(count) VALUES(9);;
# connection node_1
include/assert.inc [Database testdbother should not exist on node 1]
# connection node_2
include/assert.inc [Database testdbother shoutl not exist on node 2]
# connection node_1
REVOKE DROP ON *.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_ALTER_DB access test
#
# connection node_1
GRANT ALTER ON *.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT ALTER ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
CREATE DATABASE testdbother;
SHOW CREATE DATABASE testdbother;
Database	Create Database
testdbother	CREATE DATABASE `testdbother` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */
# connection node_testme
use testdb;
ALTER DATABASE testdbother CHARACTER SET latin7;
INSERT INTO counter(count) VALUES(10);;
# connection node_1
SHOW CREATE DATABASE testdbother;
Database	Create Database
testdbother	CREATE DATABASE `testdbother` /*!40100 DEFAULT CHARACTER SET latin7 */ /*!80016 DEFAULT ENCRYPTION='N' */
# connection node_2
SHOW CREATE DATABASE testdbother;
Database	Create Database
testdbother	CREATE DATABASE `testdbother` /*!40100 DEFAULT CHARACTER SET latin7 */ /*!80016 DEFAULT ENCRYPTION='N' */
# connection node_1
DROP DATABASE testdbother;
REVOKE ALTER ON *.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_REPAIR access test
#
# connection node_1
GRANT INSERT ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, INSERT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
REPAIR TABLE t1;
Table	Op	Msg_type	Msg_text
testdb.t1	repair	note	The storage engine for the table doesn't support repair
INSERT INTO counter(count) VALUES(11);;
# connection node_1
include/assert_grep.inc [REPAIR TABLE did execute on node 1]
# connection node_2
include/assert_grep.inc [REPAIR TABLE did execute on node 2]
# connection node_1
REVOKE INSERT ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_DROP_FUNCTION access test
#
# connection node_1
GRANT CREATE ROUTINE ON testdb.* TO 'testme'@'%';
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
CREATE FUNCTION hello2 (s CHAR(20)) RETURNS CHAR(50) DETERMINISTIC RETURN CONCAT('Hello again, ',s,'!');
# connection node_1
include/assert.inc [The hello2 function should exist on node 1]
# connection node_2
include/assert.inc [The hello2 function should exist on node 2]
# connection node_1
GRANT ALTER ROUTINE ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, CREATE ROUTINE, ALTER ROUTINE ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
GRANT EXECUTE, ALTER ROUTINE ON FUNCTION `testdb`.`hello2` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
DROP FUNCTION hello2;
INSERT INTO counter(count) VALUES(12);;
# connection node_1
include/assert.inc [The hello2 function should not exist on node 1]
# connection node_2
include/assert.inc [The hello2 function should not exist on node 2]
# connection node_1
REVOKE CREATE ROUTINE ON testdb.* FROM 'testme'@'%';
REVOKE ALTER ROUTINE ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_REVOKE access test
#
# connection node_1
GRANT SELECT ON testdb.t1 TO 'testother'@'%';
FLUSH PRIVILEGES;
# connection node_1
SHOW GRANTS FOR 'testother';
Grants for testother@%
GRANT USAGE ON *.* TO `testother`@`%`
GRANT SELECT ON `testdb`.* TO `testother`@`%`
GRANT SELECT ON `testdb`.`t1` TO `testother`@`%`
# connection node_2
SHOW GRANTS FOR 'testother';
Grants for testother@%
GRANT USAGE ON *.* TO `testother`@`%`
GRANT SELECT ON `testdb`.* TO `testother`@`%`
GRANT SELECT ON `testdb`.`t1` TO `testother`@`%`
# connection node_1
GRANT GRANT OPTION ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%` WITH GRANT OPTION
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
REVOKE SELECT ON testdb.t1 FROM 'testother'@'%';
INSERT INTO counter(count) VALUES(13);;
# connection node_1
SHOW GRANTS FOR 'testother';
Grants for testother@%
GRANT USAGE ON *.* TO `testother`@`%`
GRANT SELECT ON `testdb`.* TO `testother`@`%`
# connection node_2
SHOW GRANTS FOR 'testother';
Grants for testother@%
GRANT USAGE ON *.* TO `testother`@`%`
GRANT SELECT ON `testdb`.* TO `testother`@`%`
# connection node_1
REVOKE GRANT OPTION ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_OPTIMIZE access test
#
# connection node_1
GRANT INSERT ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, INSERT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
OPTIMIZE TABLE t1;
Table	Op	Msg_type	Msg_text
testdb.t1	optimize	note	Table does not support optimize, doing recreate + analyze instead
testdb.t1	optimize	status	OK
INSERT INTO counter(count) VALUES(14);;
# connection node_1
include/assert_grep.inc [OPTIMIZE TABLE did execute on node 1]
# connection node_2
include/assert_grep.inc [OPTIMIZE TABLE did execute on node 2]
# connection node_1
REVOKE INSERT ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_ANALYZE access test
#
# connection node_1
GRANT INSERT ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, INSERT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
testdb.t1	analyze	status	OK
INSERT INTO counter(count) VALUES(15);;
# connection node_1
include/assert_grep.inc [ANALYZE TABLE did execute on node 1]
# connection node_2
include/assert_grep.inc [ANALYZE TABLE did execute on node 2]
# connection node_1
REVOKE INSERT ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_RENAME_TABLE access test
#
# connection node_1
GRANT ALTER,DROP,CREATE,INSERT ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, INSERT, CREATE, DROP, ALTER ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
RENAME TABLE t1 to t2;
INSERT INTO counter(count) VALUES(16);;
# connection node_1
include/assert.inc [Table t1 was renamed on node 1]
# connection node_2
include/assert.inc [Table t1 was renamed on node 2]
# connection node_1
RENAME TABLE t2 to t1;
REVOKE ALTER,DROP,CREATE,INSERT ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_CREATE_USER access test
#
# connection node_1
GRANT CREATE USER ON *.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT CREATE USER ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
CREATE USER 'foo'@'%' IDENTIFIED BY 'secret';
INSERT INTO counter(count) VALUES(17);;
# connection node_1
include/assert.inc [User foo was created on node 1]
# connection node_2
include/assert.inc [User foo was created on node 2]
# connection node_1
DROP USER foo;
REVOKE CREATE USER ON *.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_DROP_USER access test
#
CREATE USER 'testdbother'@'%' IDENTIFIED BY 'secret2';
# connection node_1
GRANT CREATE USER ON *.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT CREATE USER ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
DROP USER 'testdbother'@'%';
INSERT INTO counter(count) VALUES(18);;
# connection node_1
include/assert.inc [User testdbother does not exist on node 1]
# connection node_2
include/assert.inc [User testdbother does not exist on node 2]
# connection node_1
REVOKE CREATE USER ON *.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_RENAME_USER access test
#
# connection node_1
GRANT CREATE USER ON *.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT CREATE USER ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
RENAME USER 'testother'@'%' TO 'testwho'@'%';
INSERT INTO counter(count) VALUES(19);;
# connection node_1
include/assert.inc [User testother does not exist on node 1]
include/assert.inc [User testwho exists on node 1]
# connection node_2
include/assert.inc [User testother does not exist on node 2]
include/assert.inc [User testwho exists on node 2]
# connection node_1
RENAME USER 'testwho'@'%' TO 'testother'@'%';
REVOKE CREATE USER ON *.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_REVOKE_ALL access test
#
# connection node_1
CREATE USER 'foo'@'%' IDENTIFIED BY 'secret';
GRANT SELECT ON testdb.t1 TO 'foo'@'%';
SHOW GRANTS FOR 'foo';
Grants for foo@%
GRANT USAGE ON *.* TO `foo`@`%`
GRANT SELECT ON `testdb`.`t1` TO `foo`@`%`
FLUSH PRIVILEGES;
# connection node_1
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
GRANT CREATE USER ON *.* TO 'testme'@'%';
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'foo'@'%';
INSERT INTO counter(count) VALUES(20);;
# connection node_1
SHOW GRANTS FOR 'foo';
Grants for foo@%
GRANT USAGE ON *.* TO `foo`@`%`
# connection node_2
SHOW GRANTS FOR 'foo';
Grants for foo@%
GRANT USAGE ON *.* TO `foo`@`%`
# connection node_1
DROP USER foo;
REVOKE CREATE USER ON *.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_CREATE_PROCEDURE access test
#
# connection node_1
GRANT CREATE ROUTINE,EXECUTE,ALTER ROUTINE ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, EXECUTE, CREATE ROUTINE, ALTER ROUTINE ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
CREATE PROCEDURE hellop (OUT ver_param VARCHAR(64), INOUT incr_param INT)
BEGIN
END;
INSERT INTO counter(count) VALUES(21);;
# connection node_1
include/assert.inc [The hellop procedure should exist on node 1]
# connection node_2
include/assert.inc [The hellop function should exist on node 2]
# connection node_1
DROP PROCEDURE hellop;
REVOKE CREATE ROUTINE,EXECUTE,ALTER ROUTINE ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_CREATE_SPFUNCTION access test
#
# connection node_1
GRANT CREATE ROUTINE,EXECUTE,ALTER ROUTINE ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, EXECUTE, CREATE ROUTINE, ALTER ROUTINE ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
CREATE FUNCTION hello (s CHAR(20)) RETURNS CHAR(50) DETERMINISTIC RETURN CONCAT('Hello, ',s,'!');
INSERT INTO counter(count) VALUES(22);;
# connection node_1
include/assert.inc [The hello function should exist on node 1]
# connection node_2
include/assert.inc [The hello function should exist on node 2]
# connection node_1
DROP FUNCTION hello;
REVOKE CREATE ROUTINE,EXECUTE,ALTER ROUTINE ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_DROP_PROCEDURE access test
#
# connection node_1
GRANT CREATE ROUTINE ON testdb.* TO 'testme'@'%';
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
CREATE PROCEDURE hellop (OUT ver_param VARCHAR(25), INOUT incr_param INT)
BEGIN
END;
# connection node_1
include/assert.inc [The hellop procedure should exist on node 1]
# connection node_2
include/assert.inc [The hellop procedure should exist on node 2]
# connection node_1
GRANT ALTER ROUTINE ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, CREATE ROUTINE, ALTER ROUTINE ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
GRANT EXECUTE, ALTER ROUTINE ON PROCEDURE `testdb`.`hellop` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
DROP PROCEDURE hellop;
INSERT INTO counter(count) VALUES(23);;
# connection node_1
include/assert.inc [The hellop procedure should not exist on node 1]
# connection node_2
include/assert.inc [The hellop procedure should not exist on node 2]
REVOKE CREATE ROUTINE ON testdb.* FROM 'testme'@'%';
REVOKE ALTER ROUTINE ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_ALTER_PROCEDURE access test
#
# connection node_1
GRANT CREATE ROUTINE ON testdb.* TO 'testme'@'%';
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
CREATE PROCEDURE hellop (OUT ver_param VARCHAR(25), INOUT incr_param INT)
BEGIN
END;
# connection node_1
include/assert.inc [The hellop procedure should exist on node 1]
# connection node_2
include/assert.inc [The hellop procedure should exist on node 2]
SELECT routine_name, security_type FROM information_schema.routines where ROUTINE_NAME = "hellop";
ROUTINE_NAME	SECURITY_TYPE
hellop	DEFINER
# connection node_1
GRANT ALTER ROUTINE ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, CREATE ROUTINE, ALTER ROUTINE ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
GRANT EXECUTE, ALTER ROUTINE ON PROCEDURE `testdb`.`hellop` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
ALTER PROCEDURE hellop SQL SECURITY INVOKER;
INSERT INTO counter(count) VALUES(24);;
# connection node_1
include/assert.inc [The hellop procedure should use the invoker on node 1]
# connection node_2
include/assert.inc [The hellop procedure should use the invoker on node 2]
# connection node_1
DROP PROCEDURE hellop;
REVOKE CREATE ROUTINE ON testdb.* FROM 'testme'@'%';
REVOKE ALTER ROUTINE ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_ALTER_FUNCTION access test
#
# connection node_1
GRANT CREATE ROUTINE ON testdb.* TO 'testme'@'%';
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
CREATE FUNCTION hellof (s CHAR(20)) RETURNS CHAR(50) DETERMINISTIC RETURN CONCAT('Hello again, ',s,'!');
# connection node_1
include/assert.inc [The hellof function should exist on node 1]
# connection node_2
include/assert.inc [The hellof function should exist on node 2]
SELECT routine_name, security_type FROM information_schema.routines where ROUTINE_NAME = "hellof";
ROUTINE_NAME	SECURITY_TYPE
hellof	DEFINER
# connection node_1
GRANT ALTER ROUTINE ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, CREATE ROUTINE, ALTER ROUTINE ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
GRANT EXECUTE, ALTER ROUTINE ON FUNCTION `testdb`.`hellof` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
ALTER FUNCTION hellof SQL SECURITY INVOKER;
INSERT INTO counter(count) VALUES(25);;
# connection node_1
include/assert.inc [The hellof function should use the invoker on node 1]
# connection node_2
include/assert.inc [The hellof function should use the invoker on node 2]
# connection node_1
DROP FUNCTION hellof;
REVOKE CREATE ROUTINE ON testdb.* FROM 'testme'@'%';
REVOKE ALTER ROUTINE ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_CREATE_VIEW access test
#
# connection node_1
GRANT CREATE VIEW ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, CREATE VIEW ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
CREATE VIEW testview AS SELECT * FROM t1;
INSERT INTO counter(count) VALUES(26);;
# connection node_1
include/assert.inc [The testview VIEW should exist on node 1]
# connection node_2
include/assert.inc [The testview VIEW should exist on node 2]
DROP VIEW testview;
REVOKE CREATE VIEW ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_DROP_VIEW access test
#
# connection node_1
GRANT CREATE VIEW ON testdb.* TO 'testme'@'%';
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
CREATE VIEW helloview AS SELECT * FROM t1;
# connection node_1
include/assert.inc [The helloview VIEW should exist on node 1]
# connection node_2
include/assert.inc [The helloview VIEW should exist on node 2]
# connection node_1
GRANT DROP ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, DROP, CREATE VIEW ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
DROP VIEW helloview;
INSERT INTO counter(count) VALUES(27);;
# connection node_1
include/assert.inc [The helloview VIEW should not exist on node 1]
# connection node_2
include/assert.inc [The helloview VIEW should not exist on node 2]
# connection node_1
REVOKE CREATE VIEW ON testdb.* FROM 'testme'@'%';
REVOKE DROP ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_CREATE_TRIGGER access test
#
# connection node_1
GRANT TRIGGER ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, TRIGGER ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
CREATE TRIGGER testtrigger BEFORE INSERT ON t1 FOR EACH ROW SET @sum = @sum + 1;
INSERT INTO counter(count) VALUES(28);;
# connection node_1
include/assert.inc [The testtrigger TRIGGER should exist on node 1]
# connection node_2
include/assert.inc [The testtrigger TRIGGER should exist on node 2]
# connection node_1
DROP TRIGGER testtrigger;
REVOKE TRIGGER ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_DROP_TRIGGER access test
#
# connection node_1
CREATE TRIGGER hellotrigger BEFORE INSERT ON t1 FOR EACH ROW SET @sum = @sum + 1;
# connection node_1
include/assert.inc [The hellotrigger TRIGGER should exist on node 1]
# connection node_2
include/assert.inc [The hellotrigger TRIGGER should exist on node 2]
# connection node_1
GRANT TRIGGER ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, TRIGGER ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
DROP TRIGGER hellotrigger;
INSERT INTO counter(count) VALUES(29);;
# connection node_1
include/assert.inc [The hellotrigger TRIGGER should not exist on node 1]
# connection node_2
include/assert.inc [The hellotrigger TRIGGER should not exist on node 2]
# connection node_1
REVOKE TRIGGER ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_INSTALL_PLUGIN access test
#
# connection node_1
GRANT INSERT ON *.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT INSERT ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
INSTALL PLUGIN audit_log SONAME "audit_log.so";
INSERT INTO counter(count) VALUES(30);;
# connection node_1
include/assert.inc [The audit_log PLUGIN should be installed on node 1]
# connection node_2
include/assert.inc [The audit_log PLUGIN should be installed on node 2]
# connection node_1
UNINSTALL PLUGIN audit_log;
REVOKE INSERT ON *.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_UNINSTALL_PLUGIN access test
#
# connection node_1
INSTALL PLUGIN null_audit SONAME "adt_null.so";
include/assert.inc [The null_audit PLUGIN should be installed on node 1]
# connection node_2
# connection node_1
GRANT DELETE ON *.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT DELETE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
UNINSTALL PLUGIN null_audit;
INSERT INTO counter(count) VALUES(31);;
# connection node_1
include/assert.inc [The null_audit PLUGIN should not be installed on node 1]
# connection node_2
include/assert.inc [The null_audit PLUGIN should not be installed on node 2]
# connection node_1
REVOKE DELETE ON *.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_CREATE_EVENT access test
#
# connection node_1
GRANT EVENT ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, EVENT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
CREATE EVENT testevent
ON SCHEDULE EVERY 1 HOUR
DO INSERT INTO t1(f2) VALUES(3);
INSERT INTO counter(count) VALUES(32);;
# connection node_1
include/assert.inc [The testevent EVENT should exist on node 1]
# connection node_2
include/assert.inc [The testevent EVENT should exist on node 2]
# connection node_1
DROP EVENT testevent;
REVOKE EVENT ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_ALTER_EVENT access test
#
# connection node_1
GRANT EVENT ON testdb.* TO 'testme'@'%';
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
CREATE EVENT helloevent
ON SCHEDULE EVERY 1 HOUR
DO INSERT INTO t1(f2) VALUES(3);
# connection node_1
include/assert.inc [The helloevent EVENT should exist on node 1]
# connection node_2
include/assert.inc [The helloevent EVENT should exist on node 2]
# connection node_1
GRANT EVENT ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, EVENT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
ALTER EVENT helloevent ON SCHEDULE EVERY '2:3' DAY_HOUR;
INSERT INTO counter(count) VALUES(33);;
# connection node_1
include/assert.inc [The helloevent EVENT should still exist on node 1]
# connection node_2
include/assert.inc [The helloevent EVENT should still exist on node 2]
# connection node_1
REVOKE EVENT ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_DROP_EVENT access test
#
# connection node_1
GRANT EVENT ON testdb.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT, EVENT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
DROP EVENT helloevent;
INSERT INTO counter(count) VALUES(34);;
# connection node_1
include/assert.inc [The helloevent EVENT should not exist on node 1]
# connection node_2
include/assert.inc [The helloevent EVENT should not exist on node 2]
# connection node_1
REVOKE EVENT ON testdb.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# SQLCOM_ALTER_USER access test
#
# connection node_1
include/assert.inc [User testother should not be expired on node 1]
# connection node_1
GRANT CREATE USER ON *.* TO 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT CREATE USER ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
# connection node_testme
use testdb;
ALTER USER 'testother'@'%' PASSWORD EXPIRE;
INSERT INTO counter(count) VALUES(35);;
# connection node_1
include/assert.inc [User testother should be expired on node 1]
# connection node_2
include/assert.inc [User testother should be expired on node 2]
# connection node_1
REVOKE CREATE USER ON *.* FROM 'testme'@'%';
SHOW GRANTS FOR 'testme';
Grants for testme@%
GRANT USAGE ON *.* TO `testme`@`%`
GRANT SELECT ON `testdb`.* TO `testme`@`%`
GRANT INSERT ON `testdb`.`counter` TO `testme`@`%`
FLUSH PRIVILEGES;
#
# cleanup
#
DROP USER 'testother';
DROP USER 'testme';
DROP DATABASE testdb;
SET GLOBAL debug= '';
SET GLOBAL debug= '';
