#
# MRR/Tokudb tests, taken from mysqltest/t/innodb_mrr.test
# (Turns off all other 6.0 optimizer switches than MRR)
#

--source include/have_tokudb.inc

set optimizer_switch='mrr=on,mrr_cost_based=off';

--disable_query_log
if (`select locate('semijoin', @@optimizer_switch) > 0`)
{
  set optimizer_switch='semijoin=off';
}
if (`select locate('materialization', @@optimizer_switch) > 0`)
{
  set optimizer_switch='materialization=off';
}
if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)
{
  set optimizer_switch='index_condition_pushdown=off';
}
--enable_query_log

set default_storage_engine=TokuDB;

--source include/mrr_tests.inc


# taken from include/mrr_innodb_tests.inc

--source include/count_sessions.inc

# MRR tests that are special for InnoDB (and copied for TokuDB)

--echo #
--echo # Bug#41029 "MRR: SELECT FOR UPDATE fails to lock gaps (InnoDB table)"
--echo #

# This test verifies that a SELECT FOR UPDATE statement executed in
# REPEATABLE READ isolation will lock the entire read interval by verifying
# that a second transaction trying to update data within this interval will
# be blocked.

connect (con1,localhost,root,,);
connect (con2,localhost,root,,);

connection con1;

SET AUTOCOMMIT=0;

CREATE TABLE t1 (
  dummy INT PRIMARY KEY,
  a INT UNIQUE,
  b INT
) ENGINE=TokuDB;

INSERT INTO t1 VALUES (1,1,1),(3,3,3),(5,5,5);
COMMIT;

SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
SELECT @@transaction_isolation;
START TRANSACTION;

EXPLAIN SELECT * FROM t1 WHERE a >= 2 FOR UPDATE;

SELECT * FROM t1 WHERE a >= 2 FOR UPDATE;

connection con2;

SET AUTOCOMMIT=0;
SET TOKUDB_LOCK_TIMEOUT=2;
START TRANSACTION;

--error ER_LOCK_WAIT_TIMEOUT
INSERT INTO t1 VALUES (2,2,2);
ROLLBACK;

connection con1;

ROLLBACK;
DROP TABLE t1;

connection default;
disconnect con1;
disconnect con2;

--source include/wait_until_count_sessions.inc
