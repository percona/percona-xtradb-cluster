Author <nicholas@periapt.co.uk>
Subject: spelling errors
 Preceeding -> preceding
Last-Update: 2012-05-19
Forwarded: no
--- a/libevent/event.3
+++ b/libevent/event.3
@@ -253,7 +253,7 @@ the type of event which will be either
 or
 .Va EV_WRITE .
 Additionally, an event which has registered interest in more than one of the
-preceeding events, via bitwise-OR to
+preceding events, via bitwise-OR to
 .Fn event_set ,
 can provide its callback function with a bitwise-OR of more than one triggered
 event.
--- a/mysql-test/extra/rpl_tests/rpl_ddl.test
+++ b/mysql-test/extra/rpl_tests/rpl_ddl.test
@@ -98,8 +98,8 @@
 #       --> less switching of AUTOCOMMIT mode on master side.
 #
 #    4. Never use a test object, which was direct or indirect affected by a
-#       preceeding test sequence again.
-#       If one preceeding test sequence hits a (sometimes not visible,
+#       preceding test sequence again.
+#       If one preceding test sequence hits a (sometimes not visible,
 #       because the sql error code of the statement might be 0) bug
 #       and these rules are ignored, a following test sequence might earn ugly
 #       effects like failing 'sync_slave_with_master', crashes of the slave or
--- a/mysql-test/extra/rpl_tests/rpl_row_basic.test
+++ b/mysql-test/extra/rpl_tests/rpl_row_basic.test
@@ -221,7 +221,7 @@ INSERT INTO t7 VALUES (1,3), (2,6), (3,9
 SELECT * FROM t7 ORDER BY C1;
 
 # since bug#31552/31609 idempotency is not default any longer. In order
-# the preceeding test INSERT INTO t7 to pass the mode is switched
+# the preceding test INSERT INTO t7 to pass the mode is switched
 # temprorarily
 set @@global.slave_exec_mode= 'IDEMPOTENT';
 
@@ -260,7 +260,7 @@ INSERT INTO t8 VALUES (1,2,3), (2,4,6),
 SELECT * FROM t8 ORDER BY a;
 
 # since bug#31552/31609 idempotency is not default any longer. In order
-# the preceeding test INSERT INTO t8 to pass the mode is switched
+# the preceding test INSERT INTO t8 to pass the mode is switched
 # temprorarily
 set @@global.slave_exec_mode= 'IDEMPOTENT';
 
--- a/mysql-test/include/wait_until_count_sessions.inc
+++ b/mysql-test/include/wait_until_count_sessions.inc
@@ -10,7 +10,7 @@
 #    1. We wait for $current_sessions <= $count_sessions because in the use case
 #       with count_sessions.inc before and wait_until_count_sessions.inc after
 #       the core of the test it could happen that the disconnects of sessions
-#       belonging to the preceeding test are not finished.
+#       belonging to the preceding test are not finished.
 #       sessions at test begin($count_sessions) =  m + n
 #       sessions of the previous test which will be soon disconnected = n (n >= 0)
 #       sessions at test end ($current sessions, assuming the test disconnects
--- a/mysql-test/suite/funcs_1/views/func_view.inc
+++ b/mysql-test/suite/funcs_1/views/func_view.inc
@@ -285,7 +285,7 @@ INSERT INTO t1_values SET
 #               other interesting value
 #     numbers   -> 0
 #     strings, blobs, binaries -> not full length of used data type, "exotic"
-#                                 characters and preceeding and trailing spaces
+#                                 characters and preceding and trailing spaces
 #     FIXME enum, set ??
 INSERT INTO t1_values SET
        my_char_30 = ' ---äÖüß@µ*$-- ',
--- a/mysql-test/suite/funcs_1/views/views_master.inc
+++ b/mysql-test/suite/funcs_1/views/views_master.inc
@@ -545,7 +545,7 @@ let $message= Testcase 3.3.1.7 ;
 #                   view names are accepted, at creation time, alteration time,
 #                   and drop time.
 ###############################################################################
-# Note(mleich): non-qualified view name means a view name without preceeding
+# Note(mleich): non-qualified view name means a view name without preceding
 #               database name
 --disable_warnings
 DROP VIEW  IF EXISTS v1 ;
--- a/mysql-test/suite/rpl/t/rpl_ddl.test
+++ b/mysql-test/suite/rpl/t/rpl_ddl.test
@@ -13,10 +13,10 @@
 #         sequences start.
 #
 #      2. Never use a test object, which was direct or indirect affected by a
-#         preceeding test sequence again.
+#         preceding test sequence again.
 #         Except table d1.t1 where ONLY DML is allowed.
 #
-#         If one preceeding test sequence hits a (sometimes not good visible,
+#         If one preceding test sequence hits a (sometimes not good visible,
 #         because the sql error code of the statement might be 0) bug
 #         and these rules are ignored, a following test sequence might earn ugly
 #         effects like failing 'sync_slave_with_master', crashes of the slave or
--- a/mysql-test/suite/rpl/t/rpl_row_basic_11bugs.test
+++ b/mysql-test/suite/rpl/t/rpl_row_basic_11bugs.test
@@ -239,7 +239,7 @@ INSERT INTO t1 VALUES (1,'master,slave')
 UPDATE t1 SET a = 5, b = 'slave' WHERE a = 1;
 SELECT * FROM t1 ORDER BY a;
 # since bug#31552/31609 idempotency is not default any longer. In
-# order for the preceeding test UPDATE t1 to pass, the mode is switched
+# order for the preceding test UPDATE t1 to pass, the mode is switched
 # temprorarily
 set @@global.slave_exec_mode= 'IDEMPOTENT';
 --echo **** On Master ****
--- a/mysql-test/suite/rpl_ndb/t/rpl_ndb_ddl.test
+++ b/mysql-test/suite/rpl_ndb/t/rpl_ndb_ddl.test
@@ -13,10 +13,10 @@
 #         sequences start.
 #
 #      2. Never use a test object, which was direct or indirect affected by a
-#         preceeding test sequence again.
+#         preceding test sequence again.
 #         Except table d1.t1 where ONLY DML is allowed.
 #
-#         If one preceeding test sequence hits a (sometimes not good visible,
+#         If one preceding test sequence hits a (sometimes not good visible,
 #         because the sql error code of the statement might be 0) bug
 #         and these rules are ignored, a following test sequence might earn ugly
 #         effects like failing 'sync_slave_with_master', crashes of the slave or
--- a/sql/abstract_query_plan.cc
+++ b/sql/abstract_query_plan.cc
@@ -336,7 +336,7 @@ namespace AQP
       {
         /*
           use_quick == 2 means that the decision on which access method to use
-          will be taken late (as rows from the preceeding operation arrive).
+          will be taken late (as rows from the preceding operation arrive).
           This operation is therefor not pushable.
         */
         DBUG_PRINT("info",
--- a/sql/ha_ndbcluster_push.cc
+++ b/sql/ha_ndbcluster_push.cc
@@ -1271,7 +1271,7 @@ ndb_pushed_builder_ctx::build_key(const
         if (m_join_scope.contain(referred_table_no))
         {
           // Locate the parent operation for this 'join_items[]'.
-          // May refer any of the preceeding parent tables
+          // May refer any of the preceding parent tables
           const NdbQueryOperationDef* const parent_op= m_tables[referred_table_no].m_op;
           DBUG_ASSERT(parent_op != NULL);
 
--- a/sql/log_event.cc
+++ b/sql/log_event.cc
@@ -4625,7 +4625,7 @@ int Query_log_event::do_apply_event(Rela
     if ((error= rows_event_stmt_cleanup(const_cast<Relay_log_info*>(rli), thd)))
     {
       const_cast<Relay_log_info*>(rli)->report(ERROR_LEVEL, error,
-                  "Error in cleaning up after an event preceeding the commit; "
+                  "Error in cleaning up after an event preceding the commit; "
                   "the group log file/position: %s %s",
                   const_cast<Relay_log_info*>(rli)->get_group_master_log_name(),
                   llstr(const_cast<Relay_log_info*>(rli)->get_group_master_log_pos(),
--- a/sql/rpl_utility.cc
+++ b/sql/rpl_utility.cc
@@ -1564,7 +1564,7 @@ bool Deferred_log_events::execute(Relay_
 void Deferred_log_events::rewind()
 {
   /*
-    Reset preceeding Query log event events which execution was
+    Reset preceding Query log event events which execution was
     deferred because of slave side filtering.
   */
   if (!is_empty())
--- a/sql/sql_optimizer.cc
+++ b/sql/sql_optimizer.cc
@@ -971,7 +971,7 @@ JOIN::optimize()
         }
       }
     }
-    else if (order &&                      // ORDER BY wo/ preceeding GROUP BY
+    else if (order &&                      // ORDER BY wo/ preceding GROUP BY
              (simple_order || skip_sort_order)) // which is possibly skippable
     {
       if (test_if_skip_sort_order(tab, order, m_select_limit, false, 
--- a/sql/sql_rewrite.cc
+++ b/sql/sql_rewrite.cc
@@ -40,7 +40,7 @@
 
 
 /**
-  Append a key/value pair to a string, with an optional preceeding comma.
+  Append a key/value pair to a string, with an optional preceding comma.
   For numeric values.
 
   @param           str                  The string to append to
@@ -72,7 +72,7 @@ bool append_int(String *str, bool comma,
 
 /**
   Append a key/value pair to a string if the value is non-NULL,
-  with an optional preceeding comma.
+  with an optional preceding comma.
 
   @param           str                  The string to append to
   @param           comma                Prepend a comma?
--- a/sql/sql_yacc.cc
+++ b/sql/sql_yacc.cc
@@ -35151,7 +35151,7 @@ yyreduce:
             {
               /*
                 Not in trigger assigning value to new row,
-                and option_type preceeding local variable is illegal.
+                and option_type preceding local variable is illegal.
               */
               my_parse_error(ER(ER_SYNTAX_ERROR));
               MYSQL_YYABORT;
--- a/sql/sql_yacc.yy
+++ b/sql/sql_yacc.yy
@@ -14573,7 +14573,7 @@ opt_var_ident_type:
         | SESSION_SYM '.' { $$=OPT_SESSION; }
         ;
 
-// Option values with preceeding option_type.
+// Option values with preceding option_type.
 option_value_following_option_type:
           internal_variable_name equal set_expr_or_default
           {
@@ -14590,7 +14590,7 @@ option_value_following_option_type:
             {
               /*
                 Not in trigger assigning value to new row,
-                and option_type preceeding local variable is illegal.
+                and option_type preceding local variable is illegal.
               */
               my_parse_error(ER(ER_SYNTAX_ERROR));
               MYSQL_YYABORT;
@@ -14598,7 +14598,7 @@ option_value_following_option_type:
           }
         ;
 
-// Option values without preceeding option_type.
+// Option values without preceding option_type.
 option_value_no_option_type:
           internal_variable_name equal
           {
--- a/storage/myisam/mi_rnext.c
+++ b/storage/myisam/mi_rnext.c
@@ -65,7 +65,7 @@ int mi_rnext(MI_INFO *info, uchar *buf,
       Normally SQL layer would never request "search next" if
       "search first" failed. But HANDLER may do anything.
 
-      As mi_rnext() without preceeding mi_rkey()/mi_rfirst()
+      As mi_rnext() without preceding mi_rkey()/mi_rfirst()
       equals to mi_rfirst(), we must restore original state
       as if failing mi_rfirst() was not called.
     */
