#!/bin/bash

. /usr/share/debconf/confmodule
. /usr/share/mysql/mysql-helpers

# Create directory for telemetry
if [ -d /usr/local/percona/telemetry ]; then
    install -d -m 2775 -o mysql -g percona-telemetry /usr/local/percona/telemetry/pxc
fi

MYSQLDATA=$(my_print_defaults server mysqld | grep '^--datadir=' | sed -n 's/--datadir=//p' | tail -n 1)
if [ -z "$MYSQLDATA" ];
then
    MYSQLDATA=/var/lib/mysql
fi
MYSQLFILES=/var/lib/mysql-files

take_upstart_job_backup () {
	if [ -e "/etc/init/mysql.conf" ] && [ -d "$MYSQLDATA" ];
	then
		mv /etc/init/mysql.conf $MYSQLDATA/.mysql.conf.backup
	fi
}

invoke() {
	if pathfind invoke-rc.d; then
		invoke-rc.d mysql
	else
		/etc/init.d/mysql $1
	fi
}

check_exit_status() {
        errcode=$1
        if [ $errcode -gt 0 ];
        then
                exit $errcode
        fi
}

# PKG-40 To check if the apparmor profile has been changed on the user's system
# If the file has been changed, append telemetry rules to the file
# If unchanged, install the new apparmor profile
check_apparmor_files() {
	TA_EXISTS=$(grep -c "telemetry" /etc/apparmor.d/usr.sbin.mysqld) 2> /dev/null || true
	if [ "$TA_EXISTS" -eq 0 ]; then
		if ! diff -q /etc/apparmor.d/usr.sbin.mysqld /etc/apparmor.d/old_apparmor >/dev/null; then
			sed -i 's:  # Site-specific additions and overrides. See local/README for details.::' /etc/apparmor.d/usr.sbin.mysqld
			sed -i 's:  #include <local/usr.sbin.mysqld>::' /etc/apparmor.d/usr.sbin.mysqld
			sed -i '$ s/}//' /etc/apparmor.d/usr.sbin.mysqld
			echo "# Allow access to PXC telemetry directory" >> /etc/apparmor.d/usr.sbin.mysqld
			echo "  /usr/local/percona/telemetry/pxc/ rw," >> /etc/apparmor.d/usr.sbin.mysqld
			echo "  /usr/local/percona/telemetry/pxc/** rw," >> /etc/apparmor.d/usr.sbin.mysqld
			echo "" >> /etc/apparmor.d/usr.sbin.mysqld
			echo "  # Site-specific additions and overrides. See local/README for details." >> /etc/apparmor.d/usr.sbin.mysqld
			echo "  #include <local/usr.sbin.mysqld>" >> /etc/apparmor.d/usr.sbin.mysqld
			echo "}" >> /etc/apparmor.d/usr.sbin.mysqld
			sed -r -i ':a; /^\s*$/ {N;ba}; s/( *\n *){2,}/\n/'  /etc/apparmor.d/usr.sbin.mysqld
			rm -f /etc/apparmor.d/usr.sbin.mysqld.in2
		else
			mv -f /etc/apparmor.d/usr.sbin.mysqld.in2 /etc/apparmor.d/usr.sbin.mysqld
		fi
	else
		rm -f /etc/apparmor.d/usr.sbin.mysqld.in2
        fi
}

case "$1" in
	configure)

	if [ -z "$2" ];
	then
		set -e
		# Check if we should override new default auth plugin
		OVERRIDEFILE="/etc/mysql/mysql.conf.d/default-auth-override.cnf"
		if [ ! -d /etc/mysql/mysql.conf.d ]; then
			install -d /etc/mysql/mysql.conf.d
		fi
		if [ ! -e "$OVERRIDEFILE" ];
		then
			db_input high percona-xtradb-cluster-server/default-auth-override || true
			db_go
			db_get percona-xtradb-cluster-server/default-auth-override && OVERRIDE=${RET}
			if [ "$OVERRIDE" = "Use Legacy Authentication Method (Retain MySQL 5.x Compatibility)" ]; then
				if [ "$RET" = "Use Legacy Authentication Method (Retain MySQL 5.x Compatibility)" ]; then
					install -m 0644 /dev/null "$OVERRIDEFILE"
					echo "# This file is automatically generated by MySQL Maintainer Scripts" >> "$OVERRIDEFILE"
					echo "[mysqld]" >> "$OVERRIDEFILE"
					echo "default-authentication-plugin = mysql_native_password" >> "$OVERRIDEFILE"
				fi
			fi
		fi

		# Check if we should enable lowercase table names
		OVERRIDEFILE="/etc/mysql/mysql.conf.d/lowercase-table-names.cnf"
		if [ ! -e "$OVERRIDEFILE" ];
		then
			db_get percona-xtradb-cluster-server/lowercase-table-names && OVERRIDE=${RET}
			if [ "$OVERRIDE" = "Enabled" ]; then
				install -m0644 /dev/null "$OVERRIDEFILE"
				echo "# This file is automatically generated by MySQL Maintainer Scripts" >> "$OVERRIDEFILE"
				echo "[mysqld]" >> "$OVERRIDEFILE"
				echo "lower-case-table-names = 1" >> "$OVERRIDEFILE"
			fi
		fi

                CNF_ACTION="Use NEW my.cnf"
		# If the existing config file is a proper file, we back it up
		if [ -f "/etc/mysql/my.cnf" ] && [ ! -L "/etc/mysql/my.cnf" ]; then
			cp /etc/mysql/my.cnf /etc/mysql/my.cnf.bak
			db_input high percona-xtradb-cluster-server/existing_config_file || true
			db_go
			db_get percona-xtradb-cluster-server/existing_config_file && CNF_ACTION=${RET}
		fi
		if [ -d /etc/mysql/percona-xtradb-cluster.conf.d ]; then
			CONF_EXISTS=$(grep "percona-xtradb-cluster.conf.d" /etc/mysql/mysql.cnf | wc -l)
			if [ ${CONF_EXISTS} = 0 ]; then
				echo "!includedir /etc/mysql/percona-xtradb-cluster.conf.d/" >> /etc/mysql/mysql.cnf
			fi
		fi
		if [ "${CNF_ACTION}" = "Use NEW my.cnf" ]; then
			update-alternatives --force --install /etc/mysql/my.cnf my.cnf "/etc/mysql/mysql.cnf" 300
			update-alternatives --set my.cnf /etc/mysql/mysql.cnf
		fi

		PROFILE_ACTION="Use NEW AppArmor profile"
		# If the existing AppArmor module/local profile is the proper file, we back it up
		if [ -f "/etc/apparmor.d/usr.sbin.mysqld" ]; then
			check_apparmor_files
		else
			mv -f /etc/apparmor.d/usr.sbin.mysqld.in2 /etc/apparmor.d/usr.sbin.mysqld 2> /dev/null || true
                fi
		if [ -f "/etc/apparmor.d/local/usr.sbin.mysqld" ]; then
			rm -f /etc/apparmor.d/local/usr.sbin.mysqld.in
		else
			mv -f /etc/apparmor.d/local/usr.sbin.mysqld.in /etc/apparmor.d/local/usr.sbin.mysqld
		fi
		if [ -f "/etc/apparmor.d/usr.bin.wsrep_sst_xtrabackup-v2" ]; then
			cp /etc/apparmor.d/usr.bin.wsrep_sst_xtrabackup-v2 /etc/apparmor.d/usr.bin.wsrep_sst_xtrabackup-v2_$DATE.bak 2> /dev/null || true
			mv -f /etc/apparmor.d/usr.bin.wsrep_sst_xtrabackup-v2.in /etc/apparmor.d/usr.bin.wsrep_sst_xtrabackup-v2
		fi
		rm -f /etc/apparmor.d/usr.sbin.mysqld.in
		rm -f /etc/apparmor.d/local/usr.sbin.mysqld.in
		rm -f /etc/apparmor.d/usr.bin.wsrep_sst_xtrabackup-v2.in
		rm -f /etc/apparmor.d/old_apparmor
		if aa-status --enabled 2>/dev/null; then
			apparmor_parser -r -T -W /etc/apparmor.d/usr.sbin.mysqld 2>/dev/null || true
			apparmor_parser -r -T -W /etc/apparmor.d/usr.bin.wsrep_sst_xtrabackup-v2 2>/dev/null || true
		fi

		if [ ! "$(ls -A ${MYSQLDATA})" ] && [ -d ${MYSQLFILES} ];
		then
			db_get percona-xtradb-cluster-server/root-pass && PASSWD=${RET}
			if [ ! -z "${PASSWD}" ];
			then
				SQL=/var/lib/mysql-files/SQL
				install /dev/null -m0600 -omysql -gmysql "${SQL}"

				db_set percona-xtradb-cluster-server/root-pass ""
				db_set percona-xtradb-cluster-server/re-root-pass ""
				cat << EOF > ${SQL}
USE mysql;
ALTER user 'root'@'localhost' IDENTIFIED BY '${PASSWD}';
SHUTDOWN;
EOF
				PASSWD=""
			else
				SQL=/var/lib/mysql-files/SQL
				cat << EOF > ${SQL}
USE mysql;
INSTALL PLUGIN auth_socket SONAME 'auth_socket.so';
ALTER USER 'root'@'localhost' IDENTIFIED WITH 'auth_socket';
SHUTDOWN;
EOF
			fi
			mysqld --initialize-insecure --user=mysql > /dev/null
			run_init_sql "$SQL"
			rm -f "$SQL"
		fi
		set +e
	else
		if [ -f "/etc/apparmor.d/usr.sbin.mysqld" ]; then
			check_apparmor_files
		else
			mv -f /etc/apparmor.d/usr.sbin.mysqld.in2 /etc/apparmor.d/usr.sbin.mysqld 2> /dev/null || true
                fi
		rm -f /etc/apparmor.d/old_apparmor
		if aa-status --enabled 2>/dev/null; then
			apparmor_parser -r -T -W /etc/apparmor.d/usr.sbin.mysqld 2>/dev/null || true
                fi
	fi

	;;

	abort-upgrade|abort-remove|abort-configure)

	;;

	*)
	exit 1
	;;
esac

db_stop

take_upstart_job_backup

#Some postinstall info about UDF
#
echo -e "\n\n * Percona XtraDB Cluster is distributed with several useful UDF (User Defined Function) from Percona Toolkit."
echo -e " * Run the following commands to create these functions:\n"
echo -e "\tmysql -e \"CREATE FUNCTION fnv1a_64 RETURNS INTEGER SONAME 'libfnv1a_udf.so'\""
echo -e "\tmysql -e \"CREATE FUNCTION fnv_64 RETURNS INTEGER SONAME 'libfnv_udf.so'\""
echo -e "\tmysql -e \"CREATE FUNCTION murmur_hash RETURNS INTEGER SONAME 'libmurmur_udf.so'\""
echo -e "\n * See http://www.percona.com/doc/percona-server/8.0/management/udf_percona_toolkit.html for more details\n\n"
#

# Added by dh_systemd_enable/12.6.1ubuntu2
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
        # This will only remove masks created by d-s-h on package removal.
        deb-systemd-helper unmask 'mysql.service' >/dev/null || true

        # was-enabled defaults to true, so new installations run enable.
        if deb-systemd-helper --quiet was-enabled 'mysql.service'; then
                # Enables the unit on first installation, creates new
                # symlinks on upgrades if the unit file has changed.
                deb-systemd-helper enable 'mysql.service' >/dev/null || true
        else
                # Update the statefile to add new symlinks (if any), which need to be
                # cleaned up on purge. Also remove old symlinks.
                deb-systemd-helper update-state 'mysql.service' >/dev/null || true
        fi
fi

# Automatically added by dh_installinit/11.1.6ubuntu2
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
        if [ -x "/etc/init.d/mysql" ]; then
                update-rc.d mysql defaults 19 21 >/dev/null
        fi
fi
# End automatically added section

if [ "$1" = "configure" ] || [ "$1" = "upgrade" ]; then
        systemctl daemon-reload

        state_file=/var/lib/mysql/service.state
        if [ -f $state_file ]; then
                service_state=$(cat $state_file)
                if [ "$service_state" = 0 ]; then
                        systemctl start mysql.service
                fi
                rm -rf $state_file
        fi
fi

exit 0
